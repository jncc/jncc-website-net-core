function dataSourceResource($http){var apiRoot="backoffice/UmbracoForms/DataSource/";return{getScaffold:function(){return $http.get(apiRoot+"GetScaffold")},getByGuid:function(id){return $http.get(apiRoot+"GetByGuid?guid="+id)},deleteByGuid:function(id){return $http.delete(apiRoot+"DeleteByGuid?guid="+id)},save:function(preValueSource){return $http.post(apiRoot+"PostSave",preValueSource)},validateSettings:function(preValueSource){return $http.post(apiRoot+"ValidateSettings",preValueSource)},getAllDataSourceTypesWithSettings:function(){return $http.get(apiRoot+"GetAllDataSourceTypesWithSettings")}}}function dataSourceWizardResource($http){var apiRoot="backoffice/UmbracoForms/DataSourceWizard/";return{getScaffold:function(id){return $http.get(apiRoot+"GetScaffold?guid="+id)},getAllFieldTypes:function(){return $http.get(apiRoot+"GetAllFieldTypes")},createForm:function(wizard){return $http.post(apiRoot+"CreateForm",wizard)}}}function exportResource($http){var apiRoot="backoffice/UmbracoForms/Export/";return{getExportTypes:function(formId){return $http.get(apiRoot+"GetExportTypes?formId="+formId)},generateExport:function(config){return $http.post(apiRoot+"PostGenerateExport",config)},getExportUrl:function(formId,fileName){return apiRoot+"GetExport?formId="+formId+"&fileName="+fileName},getExport:function(token){return $http.get(apiRoot+"GetExport?token="+token)}}}function fieldResource($http){var apiRoot="backoffice/UmbracoForms/Field/";return{validateSettings:function(field){return $http.post(apiRoot+"ValidateSettings",field)}}}function formResource($http){var apiRoot="backoffice/UmbracoForms/Form/";return{getScaffold:function(template){return $http.get(apiRoot+"GetScaffold?template="+template)},getScaffoldWithWorkflows:function(template){return $http.get(apiRoot+"GetScaffoldWithWorkflows?template="+template)},getAllTemplates:function(){return $http.get(apiRoot+"GetFormTemplates")},getOverView:function(){return $http.get(apiRoot+"GetOverView")},getByGuid:function(id){return $http.get(apiRoot+"GetByGuid?guid="+id)},getWithWorkflowsByGuid:function(id){return $http.get(apiRoot+"GetWithWorkflowsByGuid?guid="+id)},deleteByGuid:function(id){return $http.delete(apiRoot+"DeleteByGuid?guid="+id)},save:function(form){return $http.post(apiRoot+"PostSave",form)},saveWithWorkflows:function(formWithWorkflows){return $http.post(apiRoot+"SaveForm",formWithWorkflows)},getAllFieldTypes:function(){return $http.get(apiRoot+"GetAllFieldTypes")},getAllFieldTypesWithSettings:function(){return $http.get(apiRoot+"GetAllFieldTypesWithSettings")},getPrevalueSources:function(){return $http.get(apiRoot+"GetPrevalueSources")},copy:function(id,newFormName,copyWorkflows,copyToFolderId){return $http.post(apiRoot+"CopyForm",{guid:id,newName:newFormName,copyWorkflows:copyWorkflows,copyToFolderId:copyToFolderId})},createFolder:function(parentId,name){return $http.post(apiRoot+"CreateFolder",{parentId:parentId,name:name})},renameFolder:function(id,name){return $http.post(apiRoot+"RenameFolder",{id:id,name:name})},moveFolder:function(parentId,id){return $http.post(apiRoot+"MoveFolder",{parentId:parentId,id:id})},moveForm:function(parentId,id){return $http.post(apiRoot+"MoveForm",{parentId:parentId,id:id})},isFolderEmpty:function(id){return $http.get(apiRoot+"IsFolderEmpty?guid="+id)},deleteFolderByGuid:function(id){return $http.delete(apiRoot+"DeleteFolderByGuid?guid="+id)}}}function formPickerResource($http,umbRequestHelper){var apiRoot="backoffice/UmbracoForms/FormPicker/";return{getFormsForPicker:function(formGuids){return umbRequestHelper.resourcePromise($http.post(apiRoot+"GetFormsForPicker",formGuids),"Failed to retrieve Forms to pick")},getPickedForm:function(id){return umbRequestHelper.resourcePromise($http.get(apiRoot+"GetPickedForm?formGuid="+id),"The picked/saved form with id '"+id+"' does not exist")},getPickedForms:function(formGuids){return umbRequestHelper.resourcePromise($http.post(apiRoot+"GetPickedForms",formGuids),"The picked/saved form with id '"+formGuids+"' does not exist")}}}function licensingResource($http){var apiRoot="backoffice/UmbracoForms/Licensing/";return{getLicenseStatus:function(){return $http.get(apiRoot+"GetLicenseStatus")},getAvailableLicenses:function(config){return $http.post(apiRoot+"PostRetrieveAvailableLicenses",config)},configureLicense:function(config){return $http.post(apiRoot+"PostConfigureLicense",config)}}}function pickerResource($http){var apiRoot="backoffice/UmbracoForms/Picker/";return{getAllConnectionStrings:function(){return $http.get(apiRoot+"GetAllConnectionStrings")},getAllDataTypes:function(){return $http.get(apiRoot+"GetAllDataTypes")},getAllDocumentTypes:function(){return $http.get(apiRoot+"GetAllDocumentTypes")},getAllDocumentTypesWithAlias:function(){return $http.get(apiRoot+"GetAllDocumentTypesWithAlias")},getAllMediaTypes:function(){return $http.get(apiRoot+"GetAllMediaTypes")},getAllFields:function(formGuid){return $http.get(apiRoot+"GetAllFields?formGuid="+formGuid)},getAllProperties:function(doctypeAlias){return $http.get(apiRoot+"GetAllProperties?doctypeAlias="+doctypeAlias)},updateMappedProperties:function(doctypeAlias,currentSavedProperties){var dataToPost={doctypeAlias:doctypeAlias,currentProperties:currentSavedProperties};return $http.post(apiRoot+"PostUpdateMappedProperties",dataToPost)},getVirtualPathForEmailTemplate:function(encodedPath){return $http.get(apiRoot+"GetVirtualPathForEmailTemplate?encodedPath="+encodedPath)}}}function preValueSourceResource($http){var apiRoot="backoffice/UmbracoForms/PreValueSource/";return{getScaffold:function(){return $http.get(apiRoot+"GetScaffold")},getByGuid:function(id){return $http.get(apiRoot+"GetByGuid?guid="+id)},deleteByGuid:function(id){return $http.delete(apiRoot+"DeleteByGuid?guid="+id)},save:function(preValueSource){return $http.post(apiRoot+"PostSave",preValueSource)},validateSettings:function(preValueSource){return $http.post(apiRoot+"ValidateSettings",preValueSource)},getPreValues:function(preValueSource){return $http.post(apiRoot+"GetPreValues",preValueSource)},getPreValuesByGuid:function(preValueSourceId){return $http.get(apiRoot+"GetPreValuesByGuid?preValueSourceId="+preValueSourceId)},getAllPreValueSourceTypesWithSettings:function(){return $http.get(apiRoot+"GetAllPreValueSourceTypesWithSettings")}}}function recordResource($http){var apiRoot="backoffice/UmbracoForms/Record/";return{getRecords:function(filter){return $http.post(apiRoot+"PostRetrieveRecords",filter)},getRecordsCount:function(filter){return $http.post(apiRoot+"PostRetrieveRecordsCount",filter)},getRecordSetActions:function(){return $http.get(apiRoot+"GetRecordSetActions")},executeRecordSetAction:function(model){return $http.post(apiRoot+"PostExecuteRecordSetAction",model)}}}function securityResource($http){var apiRoot="backoffice/UmbracoForms/FormSecurity/";return{getByUserId:function(userId){return $http.get(apiRoot+"GetByUserId?userId="+userId)},save:function(userSecurity){return $http.post(apiRoot+"PostSave",userSecurity)}}}function themePickerResource($http,umbRequestHelper){var apiRoot="backoffice/UmbracoForms/ThemePicker/";return{getThemes:function(){return umbRequestHelper.resourcePromise($http.get(apiRoot+"GetThemes"),"Failed to retrieve Form Themes to pick")}}}function updatesResource($http){var apiRoot="backoffice/UmbracoForms/Updates/";return{getUpdateStatus:function(){return $http.get(apiRoot+"GetUpdateStatus")},installLatest:function(version){return $http.get(apiRoot+"InstallLatest?version="+version)},getVersion:function(){return $http.get(apiRoot+"GetVersion")},getSavePlainTextPasswordsConfiguration:function(){return $http.get(apiRoot+"GetSavePlainTextPasswordsConfiguration")}}}function workflowResource($http){var apiRoot="backoffice/UmbracoForms/Workflow/";return{getAllWorkflowTypesWithSettings:function(){return $http.get(apiRoot+"GetAllWorkflowTypesWithSettings")},getAllWorkflows:function(formGuid){return $http.get(apiRoot+"GetAllWorkflows?formGuid="+formGuid)},getScaffoldWorkflowType:function(workflowTypeId){return $http.get(apiRoot+"GetScaffoldWorkflowType?workflowTypeId="+workflowTypeId)},validateWorkflowSettings:function(workflowViewModel){return $http.post(apiRoot+"ValidateWorkflowSettings",workflowViewModel)}}}function formService(preValueSourceResource){var generateGUID=function(){var d=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(c){var r=(d+Math.random()*16)%16|0;return d=Math.floor(d/16),(c==="x"?r:r&7|8).toString(16)})},generateCopiedAlias=function(alias,existingFieldAliases){var result,matches=alias.match(/\d+$/),clashesWithExistingAlias,i;if(matches){var prefix=alias.substring(0,alias.length-matches[0].length),existingNumberSuffix=parseInt(matches[0],10),newNumberSuffix=existingNumberSuffix+1;result=prefix+newNumberSuffix}else result=alias+"2";for(clashesWithExistingAlias=!1,i=0;i<existingFieldAliases.length;i++)if(existingFieldAliases[i]===result){clashesWithExistingAlias=!0;break}return clashesWithExistingAlias?generateCopiedAlias(result,existingFieldAliases):result},service={fieldTypes:[],actionTypes:[{name:"Show",value:"Show"},{name:"Hide",value:"Hide"}],logicTypes:[{name:"all",value:"All"},{name:"any",value:"Any"}],operators:[{name:"is",value:"Is"},{name:"is not",value:"IsNot"},{name:"is greater than",value:"GreaterThen"},{name:"is less than",value:"LessThen"},{name:"contains",value:"Contains"},{name:"starts with",value:"StartsWith"},{name:"ends with",value:"EndsWith"}],getActionTypes:function(){return service.actionTypes},getLogicTypes:function(){return service.logicTypes},getOperators:function(){return service.operators},initForm:function(form,fieldtypes){service.fieldTypes=fieldtypes;form.pages&&form.pages.length!==0?_.each(service.getAllFields(form),function(field){field.$fieldType||service.setFieldType(field,field.fieldTypeId)}):service.addPage(form)},addPage:function(form,index){var p={caption:"",fieldSets:[],id:generateGUID()};service.addFieldset(p);form.pages.length>index?form.pages.splice(index,0,p):form.pages.push(p)},addFieldset:function(page,index){var fs={caption:"",containers:[],id:generateGUID()};service.addContainer(fs);page.fieldSets.length>index?page.fieldSets.splice(index,0,fs):page.fieldSets.push(fs)},copyFieldset:function(page,fieldset,existingFieldAliases){var index=page.fieldSets.indexOf(fieldset);index>=0&&service.copyFieldsetAtIndex(page,fieldset,index,existingFieldAliases)},copyFieldsetAtIndex:function(page,fieldset,index,existingFieldAliases){var copiedFieldset=JSON.parse(JSON.stringify(fieldset)),i,j,copiedField;for(copiedFieldset.id=generateGUID(),i=0;i<copiedFieldset.containers.length;i++)for(j=0;j<copiedFieldset.containers[i].fields.length;j++)copiedField=copiedFieldset.containers[i].fields[j],copiedField.id=generateGUID(),copiedField.alias=generateCopiedAlias(copiedField.alias,existingFieldAliases),existingFieldAliases.push(copiedField.alias);page.fieldSets.splice(index+1,0,copiedFieldset)},deleteFieldset:function(page,fieldset){if(page.fieldSets.length>1){var index=page.fieldSets.indexOf(fieldset);page.fieldSets.splice(index,1)}else fieldset.containers.length=0,service.addContainer(fieldset)},deleteFieldsetAtIndex:function(page,index){page.fieldSets.length>1?page.fieldSets.splice(index,1):(fieldset.containers.length=0,service.addContainer(fieldset))},splitFieldset:function(page,fieldset,container,splitAtIndex){var newfieldset={caption:"",containers:[{caption:"",fields:[]}]},insertAt=page.fieldSets.indexOf(fieldset),oldFields,newFields;page.fieldSets.splice(insertAt+1,0,newfieldset);oldFields=container.fields.slice(0,splitAtIndex+1);newFields=container.fields.slice(splitAtIndex+1);newfieldset.containers[0].fields=newFields;container.fields=oldFields},addContainer:function(fieldset,index){var c={caption:"",fields:[]};fieldset.containers.length>index?fieldset.containers.splice(index,0,c):fieldset.containers.push(c)},splitContainer:function(fieldset,container,splitAtIndex){var newContainer={caption:"",fields:[]},insertAt=fieldset.containers.indexOf(container),newFields,oldFields;fieldset.containers.splice(insertAt-1,0,newContainer);newFields=container.fields.slice(0,splitAtIndex+1);oldFields=container.fields.slice(splitAtIndex+1);newContainer.fields=newFields;container.fields=oldFields},deleteContainer:function(fieldset,container){if(fieldset.containers.length>1){var index=fieldset.containers.indexOf(container);index>=0&&service.deleteContainerAtIndex(fieldset,index)}else container.fields.length=0},deleteContainerAtIndex:function(fieldset,index){fieldset.containers.length>1?fieldset.containers.splice(index,1):fieldset.containers.length=0},syncContainerWidths:function(form){_.each(form.pages,function(page){_.each(page.fieldSets,function(fieldset){var containers=fieldset.containers.length,avrg=Math.floor(12/containers);_.each(fieldset.containers,function(container){container.width=avrg})})})},addField:function(container,fieldtype,index){var newField={caption:"",id:generateGUID(),settings:{},preValues:[],$focus:!0};service.loadFieldTypeSettings(newField,fieldtype);container.fields.length>index?container.fields.splice(index,0,newField):container.fields.push(newField)},addEmptyField:function(container){var newField={caption:"",alias:"",id:generateGUID(),settings:{},preValues:[],$focus:!0};return container.fields.push(newField),newField},getAllFields:function(form){var fields=[];return form.pages&&_.each(form.pages,function(page){page.fieldSets&&_.each(page.fieldSets,function(fieldset){fieldset.containers&&_.each(fieldset.containers,function(container){container.fields&&_.each(container.fields,function(field){fields.push(field)})})})}),fields},copyField:function(container,field,existingFieldAliases){var index=container.fields.indexOf(field);index>=0&&service.copyFieldAtIndex(container,field,index,existingFieldAliases)},copyFieldAtIndex:function(container,field,index,existingFieldAliases){var copiedField=Object.assign({},field);copiedField.id=generateGUID();copiedField.alias=generateCopiedAlias(field.alias,existingFieldAliases);container.fields.splice(index+1,0,copiedField)},deleteField:function(fieldset,container,field){var index=container.fields.indexOf(field);index>=0&&service.deleteFieldAtIndex(fieldset,container,index)},deleteFieldAtIndex:function(fieldset,container,index){container.fields.splice(index,1);container.fields.length===0&&service.deleteContainer(fieldset,container)},setFieldType:function(field,fieldTypeId){field.fieldTypeId=fieldTypeId;var fldt=_.find(service.fieldTypes,function(ft){return ft.id===field.fieldTypeId});field.$fieldType=fldt;service.loadFieldTypeSettings(field,field.$fieldType);service.loadFieldTypePrevalues(field)},loadFieldTypePrevalues:function(field){field.prevalueSourceId!==null&&field.prevalueSourceId!=="00000000-0000-0000-0000-000000000000"?preValueSourceResource.getPreValuesByGuid(field.prevalueSourceId).then(function(response){field.$preValues=response.data}):field.$preValues=null},loadFieldTypeSettings:function(field,fieldtype){var stng=angular.copy(fieldtype.settings);field.fieldTypeId!==fieldtype.id&&(field.settings={});field.fieldTypeId=fieldtype.id;field.$fieldType=fieldtype;fieldtype.settings&&_.each(fieldtype.settings,function(setting){field.settings[setting.alias]||(field.settings[setting.alias]="")})},deleteConditionRule:function(rules,rule){var index=rules.indexOf(rule);rules.splice(index,1)},addConditionRule:function(condition){condition.rules||(condition.rules=[]);condition.rules.push({field:condition.$newrule.field,operator:condition.$newrule.operator,value:condition.$newrule.value})},addEmptyConditionRule:function(condition){condition.rules||(condition.rules=[]);condition.rules.push({field:"",operator:"",value:""})},populateConditionRulePrevalues:function(selectedField,rule,fields){for(var field,rulePreValuesObjectArray,preValueIndex,preValue,preValueObject,i=0;i<fields.length;i++)if(field=fields[i],field.id===selectedField)if(field.$preValues&&field.$preValues.length>0)rule.$preValues=field.$preValues;else if(field.preValues&&field.preValues.length>0){for(rulePreValuesObjectArray=[],preValueIndex=0;preValueIndex<field.preValues.length;preValueIndex++)preValue=field.preValues[preValueIndex],preValueObject={value:preValue},rulePreValuesObjectArray.push(preValueObject);rule.$preValues=rulePreValuesObjectArray}else rule.$preValues=null}};return service}angular.module("umbraco").controller("UmbracoForms.RenderTypes.FileController",function($scope){var imageExts=["jpg","jpeg","png","gif","bmp"];$scope.files=$scope.field.replace("~","").split(",");$scope.isImage=function(filepath){return imageExts.indexOf($scope.getExtension(filepath))>=0};$scope.getExtension=function(filepath){return filepath.substring(filepath.lastIndexOf(".")+1).toLowerCase()};$scope.getFileName=function(filepath){return filepath.substring(filepath.lastIndexOf("/")+1)};$scope.getPreview=function(filepath){return filepath.replace("~","")+"?width=400"}});angular.module("umbraco").controller("UmbracoForms.SettingTypes.DocumentMapperController",function($scope,$routeParams,pickerResource){if($scope.setting.value){var value=JSON.parse($scope.setting.value);$scope.doctype=value.doctype;$scope.nameField=value.nameField;$scope.nameStaticValue=value.nameStaticValue;pickerResource.updateMappedProperties($scope.doctype,value.properties).then(function(response){$scope.properties=response.data})}pickerResource.getAllDocumentTypesWithAlias().then(function(response){$scope.doctypes=response.data});pickerResource.getAllFields($routeParams.id).then(function(response){$scope.fields=response.data});$scope.setDocType=function(){pickerResource.getAllProperties($scope.doctype).then(function(response){$scope.properties=response.data})};$scope.setValue=function(){var val={};val.doctype=$scope.doctype;val.nameField=$scope.nameField;val.nameStaticValue=$scope.nameStaticValue;val.properties=$scope.properties;$scope.setting.value=JSON.stringify(val)}});angular.module("umbraco").controller("UmbracoForms.SettingTypes.EmailTemplatePicker",function($scope,pickerResource,editorService){$scope.openTreePicker=function(){var treePickerOverlay={treeAlias:"EmailTemplates",section:"forms",entityType:"email-template",multiPicker:!1,onlyInitialized:!1,select:function(node){pickerResource.getVirtualPathForEmailTemplate(node.id).then(function(response){$scope.setting.value=response.data.path});editorService.close()},close:function(){editorService.close()}};editorService.treePicker(treePickerOverlay)}});angular.module("umbraco").controller("UmbracoForms.SettingTypes.FieldMapperController",function($scope,$routeParams,pickerResource){function init(){$scope.mappings=$scope.setting.value?JSON.parse($scope.setting.value):[];var formId=$routeParams.id;formId===-1&&$scope.model&&$scope.model.fields||pickerResource.getAllFields($routeParams.id).then(function(response){$scope.fields=response.data})}$scope.addMapping=function(){$scope.mappings.push({alias:"",value:"",staticValue:""})};$scope.deleteMapping=function(index){$scope.mappings.splice(index,1);$scope.setting.value=JSON.stringify($scope.mappings)};$scope.stringifyValue=function(){$scope.setting.value=JSON.stringify($scope.mappings)};init()}),function(){"use strict";function FileUploadSettingsController($scope,Upload,notificationsService){var vm=this;vm.isUploading=!1;vm.filePercentage=0;vm.savedPath=$scope.setting.value;vm.uploadFile=function(file){Upload.upload({url:"backoffice/UmbracoForms/PreValueFile/PostAddFile",fields:{previousPath:vm.savedPath},file:file}).progress(function(evt){vm.isUploading=!0;var progressPercentage=parseInt(100*evt.loaded/evt.total,10);vm.filePercentage=progressPercentage}).success(function(data){$scope.setting.value=data.FilePath;vm.savedPath=data.FilePath;vm.isUploading=!1;vm.filePercentage=0}).error(function(evt){if(angular.isArray(evt.notifications))for(var i=0;i<evt.notifications.length;i++)notificationsService.showNotification(evt.notifications[i]);vm.isUploading=!1;vm.filePercentage=0})}}angular.module("umbraco").controller("UmbracoForms.SettingTypes.FileUpload",FileUploadSettingsController)}();angular.module("umbraco").controller("UmbracoForms.SettingTypes.File",function($scope,editorService){function populateFile(item){$scope.setting.value=item.image}$scope.openMediaPicker=function(){var mediaPicker={submit:function(model){var selectedImage=model.selection[0];populateFile(selectedImage);editorService.close()},close:function(){editorService.close()}};editorService.mediaPicker(mediaPicker)};$scope.clear=function(){$scope.setting.value=undefined}});angular.module("umbraco").controller("UmbracoForms.SettingTypes.NumericFieldController",function($scope){var vm=this,defaultValue;vm.min=parseFloat($scope.setting.prevalues[0]);vm.max=parseFloat($scope.setting.prevalues[1]);defaultValue=parseFloat($scope.setting.prevalues[2]);$scope.setting.value||($scope.setting.value=defaultValue);vm.value=parseFloat($scope.setting.value);vm.change=function(){$scope.setting.value=vm.value.toString()}});angular.module("umbraco").controller("UmbracoForms.SettingTypes.Pickers.CheckboxController",function($scope){function toggle(){vm.checked=!vm.checked;$scope.setting.value=vm.checked?"True":"False"}var vm=this,defaultToTrue=$scope.setting.prevalues.length>0&&$scope.setting.prevalues[0]?!0:!1;vm.toggle=toggle;vm.checked=!1;vm.checked=defaultToTrue?$scope.setting.value!=="False":$scope.setting.value==="True"});angular.module("umbraco").controller("UmbracoForms.SettingTypes.Pickers.ConnectionStringController",function($scope,$routeParams,pickerResource){pickerResource.getAllConnectionStrings().then(function(response){$scope.strings=response.data})});angular.module("umbraco").controller("UmbracoForms.SettingTypes.Pickers.ContentController",function($scope,$routeParams,editorService,entityResource,iconHelper){function populate(item){$scope.clear();item.icon=iconHelper.convertFromLegacyIcon(item.icon);$scope.node=item;$scope.id=item.id;$scope.setting.value=item.id}$scope.setting||($scope.setting={});var val=parseInt($scope.setting.value);!isNaN(val)&&angular.isNumber(val)&&($scope.showQuery=!1,entityResource.getById($scope.setting.value,"Document").then(function(item){item.icon=iconHelper.convertFromLegacyIcon(item.icon);$scope.node=item}));$scope.openContentPicker=function(){var contentPicker={submit:function(model){var selectedNode=model.selection[0];populate(selectedNode);editorService.close()},close:function(){editorService.close()}};editorService.contentPicker(contentPicker)};$scope.clear=function(){$scope.id=undefined;$scope.node=undefined;$scope.setting.value=undefined}});angular.module("umbraco").controller("UmbracoForms.SettingTypes.Pickers.ContentWithXpathController",function($scope,editorService,entityResource,iconHelper){function init(){valueIsEntityId($scope.setting.value)?entityResource.getById($scope.setting.value,"Document").then(function(item){item.icon=iconHelper.convertFromLegacyIcon(item.icon);$scope.node=item}):$scope.setting.value&&($scope.queryIsVisible=!0,$scope.query=$scope.setting.value)}function valueIsEntityId(value){return/^([1-9]\d*)$/.test(value)}function populate(item){$scope.clear();item.icon=iconHelper.convertFromLegacyIcon(item.icon);$scope.node=item;$scope.id=item.id;$scope.setting.value=item.id}$scope.queryIsVisible=!1;$scope.helpIsVisible=!1;$scope.query="";$scope.setting||($scope.setting={});$scope.openContentPicker=function(){var contentPicker={submit:function(model){populate(model.selection[0]);editorService.close()},close:function(){editorService.close()}};editorService.contentPicker(contentPicker)};$scope.showQuery=function(){$scope.queryIsVisible=!0};$scope.toggleHelp=function(){$scope.helpIsVisible=!$scope.helpIsVisible};$scope.setXpath=function(){$scope.setting.value=$scope.query};$scope.clear=function(){$scope.id=undefined;$scope.node=undefined;$scope.setting.value=undefined;$scope.query=undefined;$scope.queryIsVisible=!1};init()});angular.module("umbraco").controller("UmbracoForms.SettingTypes.Pickers.DataTypeController",function($scope,$routeParams,pickerResource){pickerResource.getAllDataTypes().then(function(response){$scope.datatypes=response.data})});angular.module("umbraco").controller("UmbracoForms.SettingTypes.Pickers.DocumentTypeController",function($scope,$routeParams,pickerResource){pickerResource.getAllDocumentTypesWithAlias().then(function(response){$scope.doctypes=response.data})});angular.module("umbraco").controller("UmbracoForms.SettingTypes.RangeController",function($scope){function getDecimalPlaces(value){return Math.floor(value)===value?0:value.toString().split(".")[1].length||0}var vm=this,min=parseFloat($scope.setting.prevalues[0]),max=parseFloat($scope.setting.prevalues[1]),step=parseFloat($scope.setting.prevalues[2]),defaultValue=parseFloat($scope.setting.prevalues[3]),stepDecimalPlaces=getDecimalPlaces(step);$scope.setting.value||($scope.setting.value=defaultValue);vm.value=parseFloat($scope.setting.value);vm.sliderOptions={start:[vm.value],step:step,tooltips:[!0],format:{to:function(value){return value.toFixed(stepDecimalPlaces)},from:function(value){return Number(value)}},range:{min:min,max:max},pips:{mode:"steps",density:100,format:{to:function(value){return value.toFixed(stepDecimalPlaces)},from:function(value){return Number(value)}}}};vm.change=function(values){$scope.setting.value=values[0].toString()}});angular.module("umbraco").controller("UmbracoForms.SettingTypes.StandardFieldMapperController",function($scope){function init(){$scope.mappings=$scope.setting.value?JSON.parse($scope.setting.value):[];var hasMapping=function(mappings,fieldName){return mappings.filter(function(e){return e.field===fieldName}).length>0},ensureDefaultMapping=function(mappings,fieldName){hasMapping($scope.mappings,fieldName)||mappings.push({field:fieldName})};ensureDefaultMapping($scope.mappings,"FormId");ensureDefaultMapping($scope.mappings,"FormName");ensureDefaultMapping($scope.mappings,"PageUrl");ensureDefaultMapping($scope.mappings,"SubmissionDate")}$scope.friendlyName=function(field){switch(field){case"FormId":return"Form ID";case"FormName":return"Form name";case"PageUrl":return"Page URL";case"SubmissionDate":return"Submission date/time";default:return field}};$scope.toggleInclude=function(mapping){mapping.include=!mapping.include;mapping.keyName=mapping.include?mapping.field:"";$scope.setting.value=JSON.stringify($scope.mappings)};$scope.stringifyValue=function(){$scope.setting.value=JSON.stringify($scope.mappings)};init()});angular.module("umbraco").controller("UmbracoForms.Dashboards.FormsController",function($scope,$location,$cookies,formResource,licensingResource,updatesResource,notificationsService,userService,securityResource,recordResource,localizationService){function getRecordCounts(){_.each(vm.forms,function(form,index){if(!(index>=vm.formsLimit)&&!form.gotEntries){var filter={form:form.id};recordResource.getRecordsCount(filter).then(function(response){form.entries=response.data.count;form.gotEntries=!0})}})}var vm=this,packageInstall;vm.overlay={show:!1};localizationService.localizeMany(["formsDashboard_installOverlayTitle","formsDashboard_installOverlayDescription"]).then(function(labels){vm.overlay.title=labels[0];vm.overlay.description=labels[1]});packageInstall=$cookies.get("umbPackageInstallId");packageInstall&&(vm.overlay.show=!0,$cookies.put("umbPackageInstallId",""));vm.userCanManageForms=!1;userService.getCurrentUser().then(function(response){vm.currentUser=response;vm.isAdminUser=response.userGroups.includes("admin");securityResource.getByUserId(vm.currentUser.id).then(function(response){vm.userCanManageForms=response.data.userSecurity.manageForms})});vm.overlay.show||formResource.getOverView().then(function(response){response.data.length===0&&(vm.overlay.show=!0,localizationService.localizeMany(["formsDashboard_emptyOverlayTitle","formsDashboard_emptyOverlayDescription"]).then(function(labels){vm.overlay.title=labels[0];vm.overlay.description=labels[1]}))});vm.getLicenses=function(config){vm.loginError=!1;vm.hasLicenses=undefined;vm.isLoading=!0;licensingResource.getAvailableLicenses(config).then(function(response){var licenses=response.data,currentDomain=window.location.hostname;vm.hasLicenses=licenses.length>0;_.each(licenses,function(lic){lic.bindings&&lic.bindings.indexOf(currentDomain)>=0&&(lic.currentDomainMatch=!0)});vm.configuredLicenses=_.sortBy(_.filter(licenses,function(license){return license.configured}),"currentDomainMatch");vm.openLicenses=_.filter(licenses,function(license){return license.configured===!1});vm.isLoading=!1},function(){vm.loginError=!0;vm.hasLicenses=undefined;vm.isLoading=!1})};vm.configure=function(config){vm.isLoading=!0;licensingResource.configureLicense(config).then(function(){vm.configuredLicenses.length=0;vm.openLicenses.length=0;vm.loadStatus();localizationService.localizeMany(["formsDashboard_licenseConfiguredNotificationTitle","formsDashboard_licenseConfiguredNotificationMessage"]).then(function(labels){notificationsService.success(labels[0],labels[1])})})};vm.loadStatus=function(){licensingResource.getLicenseStatus().then(function(response){vm.status=response.data;vm.isLoading=!1});updatesResource.getUpdateStatus().then(function(response){vm.version=response.data});updatesResource.getVersion().then(function(response){vm.currentVersion=response.data});updatesResource.getSavePlainTextPasswordsConfiguration().then(function(response){vm.savePlainTextPasswords=response.data.toString()==="true"})};vm.upgrade=function(){if(!$scope.isAdminUser){localizationService.localizeMany(["formsDashboard_insufficientPermissionsError","formsDashboard_insufficientPermissionsUpgradeMessage"]).then(function(labels){notificationsService.success(labels[0],labels[1])});return}vm.installing=!0;updatesResource.installLatest($scope.version.remoteVersion).then(function(){window.location.reload()},function(){vm.installing=!1})};vm.create=function(){if(!vm.userCanManageForms){localizationService.localizeMany(["formsDashboard_insufficientPermissionsError","formsDashboard_insufficientPermissionsMessage"]).then(function(labels){notificationsService.success(labels[0],labels[1])});return}$location.url("forms/Form/edit/-1?template=&create=true")};vm.configuration={domain:window.location.hostname};vm.loadStatus();vm.initialFormsLimit=4;vm.formsLimit=4;vm.hasUnrestrictedLicense=function(status){return status&&status.validDomains&&status.validDomains.includes("*not* associated with any ips or domains")};vm.displayLicensedDomains=function(status){return status&&status.validDomains&&status.validDomains.length>0?("<ul><li>"+status.validDomains.replace(/- Domain: /g,"").split("\n").join("<\/li><li>")+"<\/li><\/ul>").replace("<li><\/li>",""):""};vm.showMore=function(){vm.formsLimit=vm.formsLimit+8;getRecordCounts()};formResource.getOverView().then(function(response){vm.forms=response.data;getRecordCounts()})});angular.module("umbraco").controller("UmbracoForms.Editors.DataSource.DeleteController",function($scope,dataSourceResource,navigationService,treeService){$scope.delete=function(id){dataSourceResource.deleteByGuid(id).then(function(){treeService.removeNode($scope.currentNode);navigationService.hideNavigation()})};$scope.cancelDelete=function(){navigationService.hideNavigation()}});angular.module("umbraco").controller("UmbracoForms.Editors.DataSource.EditController",function($scope,$routeParams,dataSourceResource,editorState,notificationsService,editorService,navigationService,formHelper,userService,securityResource,localizationService,providerLocalizationHelper){var currentUserId=null,setTypeAndSettings;userService.getCurrentUser().then(function(response){currentUserId=response.id;securityResource.getByUserId(currentUserId).then(function(response){if($scope.security=response.data,!$scope.security.userSecurity.manageDataSources){localizationService.localizeMany(["formPermissions_accessDeniedTitle","formDataSources_accessDeniedMessage"]).then(function(labels){notificationsService.error(labels[0],labels[1])});navigationService.syncTree({tree:"datasource",path:["-1"],forceReload:!0,activate:!1}).then(function(response){navigationService.reloadNode(response.node)});return}})});$routeParams.create?dataSourceResource.getScaffold().then(function(response){$scope.loaded=!0;$scope.dataSource=response.data;dataSourceResource.getAllDataSourceTypesWithSettings().then(function(resp){$scope.types=resp.data;localizationService.localizeMany(providerLocalizationHelper.getLocalizationKeys("formProviderDataSources",$scope.types)).then(function(labels){providerLocalizationHelper.applyLocalizationLabels($scope.types,labels)})});editorState.set($scope.form)}):dataSourceResource.getByGuid($routeParams.id).then(function(response){$scope.dataSource=response.data;dataSourceResource.getAllDataSourceTypesWithSettings().then(function(resp){$scope.types=resp.data;localizationService.localizeMany(providerLocalizationHelper.getLocalizationKeys("formProviderDataSources",$scope.types)).then(function(labels){providerLocalizationHelper.applyLocalizationLabels($scope.types,labels);setTypeAndSettings();$scope.loaded=!0})});editorState.set($scope.dataSource)});$scope.setType=function(){setTypeAndSettings()};$scope.save=function(){formHelper.submitForm({scope:$scope})&&($scope.dataSource.settings={},$scope.dataSource.$type&&angular.forEach($scope.dataSource.$type.settings,function(setting){var key=setting.alias,value=setting.value;$scope.dataSource.settings[key]=value}),localizationService.localizeMany(["formDataSources_saveSuccessTitle","formDataSources_saveErrorTitle","formMessages_saveErrorMessage"]).then(function(labels){dataSourceResource.validateSettings($scope.dataSource).then(function(response){$scope.errors=response.data;$scope.errors.length>0?($scope.dataSource.valid=!1,angular.forEach($scope.errors,function(error){notificationsService.error(labels[1],error.Message)})):dataSourceResource.save($scope.dataSource).then(function(response){$scope.dataSource=response.data;editorState.set($scope.dataSource);setTypeAndSettings();navigationService.syncTree({tree:"datasource",path:[String($scope.dataSource.id)],forceReload:!0});notificationsService.success(labels[0],"");$scope.dataSource.valid=!0;$scope.dataSourceForm.$dirty=!1},function(){notificationsService.error(labels[1],"")})},function(){notificationsService.error(labels[1],labels[2])})}))};$scope.showWizard=function(){var dataSourcesSettings={view:"/App_Plugins/UmbracoForms/backoffice/Datasource/dialogs/wizard.html",dataSourceId:$scope.dataSource.id,size:"medium"};editorService.open(dataSourcesSettings)};setTypeAndSettings=function(){$scope.dataSource.$type=_.where($scope.types,{id:$scope.dataSource.formDataSourceTypeId})[0];angular.forEach($scope.dataSource.settings,function(){for(var key in $scope.dataSource.settings)$scope.dataSource.settings.hasOwnProperty(key)&&_.where($scope.dataSource.$type.settings,{alias:key}).length>0&&(_.where($scope.dataSource.$type.settings,{alias:key})[0].value=$scope.dataSource.settings[key])})}});angular.module("umbraco").controller("UmbracoForms.Editors.DataSource.WizardController",function($scope,$routeParams,dataSourceWizardResource,navigationService,notificationsService,editorService){$scope.currentStep=1;dataSourceWizardResource.getScaffold($scope.model.dataSourceId).then(function(response){$scope.wizard=response.data;$scope.hasPrimaryKeys=$scope.wizard.mappings.length!=_.where($scope.wizard.mappings,{prevalueKeyField:null}).length;dataSourceWizardResource.getAllFieldTypes().then(function(resp){$scope.fieldtypes=resp.data;$scope.ready=!0})});$scope.createForm=function(){dataSourceWizardResource.createForm($scope.wizard).then(function(){editorService.closeAll();notificationsService.success("Form created","")})};$scope.cancel=function(){editorService.closeAll()};$scope.gotoStep=function(step){$scope.currentStep=step};$scope.gotoThirdStep=function(){$scope.currentStep=$scope.hasPrimaryKeys?3:4};$scope.goBackToThirdStep=function(){$scope.currentStep=$scope.hasPrimaryKeys?3:2}});angular.module("umbraco").controller("UmbracoForms.Editors.Form.CopyController",function($scope,formResource,navigationService,localizationService){function parseFolderId(id){return id.substring(7)}function nodeSelectHandler(args){args.event.preventDefault();args.event.stopPropagation();$scope.copiedForm.copyToFolder&&($scope.copiedForm.copyToFolder.selected=!1);$scope.copiedForm.copyToFolder=args.node;$scope.copiedForm.copyToFolder.selected=!0}$scope.dialogTreeApi={};$scope.title="";$scope.copiedForm={name:"",copyWorkflows:!1,copyToNewFolder:!1,copyToFolder:null};localizationService.localize("formCopy_title",[$scope.currentNode.name]).then(function(val){$scope.title=val});$scope.copyForm=function(formId){var copyToFolderId=null;$scope.copiedForm.copyToNewFolder&&(copyToFolderId=$scope.copiedForm.copyToFolder.id=="-1"?"-1":parseFolderId($scope.copiedForm.copyToFolder.id));formResource.copy(formId,$scope.copiedForm.name,$scope.copiedForm.copyWorkflows,copyToFolderId).then(function(response){navigationService.syncTree({tree:"form",path:response.data.path.split(","),forceReload:!0,activate:!1});navigationService.hideNavigation()})};$scope.onTreeInit=function(){$scope.dialogTreeApi.callbacks.treeNodeSelect(nodeSelectHandler)};$scope.cancelCopy=function(){navigationService.hideNavigation()}});angular.module("umbraco").controller("UmbracoForms.Editors.Form.CreateController",function($scope,$location,formResource,navigationService,formHelper,formsValidationService){function navigateToCreateForm(templateAlias){$location.path("/forms/Form/edit/"+$scope.currentNode.id).search("create","true").search("template",templateAlias);navigationService.hideNavigation()}$scope.model={folderName:"",creatingFolder:!1};var node=$scope.currentNode;formResource.getAllTemplates().then(function(response){$scope.model.formTemplates=response.data});$scope.createEmptyForm=function(){navigateToCreateForm("")};$scope.createTemplateForm=function(templateAlias){navigateToCreateForm(templateAlias)};$scope.showCreateFolderForm=function(){$scope.model.creatingFolder=!0};$scope.createFolder=function(){$scope.model.errorMessage=null;formHelper.submitForm({scope:$scope,formCtrl:$scope.createFolderForm})&&formResource.createFolder(node.id,$scope.model.folderName).then(function(response){navigationService.hideMenu();var folder=response.data,currPath=node.path?node.path:"-1";navigationService.syncTree({tree:"form",path:(currPath+",folder-"+folder.id).split(","),forceReload:!0,activate:!0});formHelper.resetForm({scope:$scope,formCtrl:$scope.createFolderForm})},function(err){formHelper.resetForm({scope:$scope,formCtrl:$scope.createFolderForm,hasErrors:!0});$scope.model.errorMessage=formsValidationService.getErrorMessageFromExceptionResponse(err)})};$scope.hideDialog=function(){navigationService.hideDialog(!0)}}),function(){"use strict";function Controller($scope,formResource,navigationService,notificationsService,treeService,localizationService){function parseFolderId(id){return id.substring(folderIdPrefix.length)}function performDelete(id){vm.buttonState="busy";localizationService.localizeMany(["formDelete_successMessageForForm","formDelete_failedMessageForForm","formDelete_successMessageForFolder","formDelete_failedMessageForFolder"]).then(function(labels){vm.deletingFolder?formResource.deleteFolderByGuid(parseFolderId(id)).then(function(){vm.buttonState="success";treeService.removeNode($scope.currentNode);navigationService.hideNavigation();notificationsService.success(labels[2])},function(err){vm.buttonState="error";notificationsService.error(labels[3],err.data.Message)}):formResource.deleteByGuid(id).then(function(){vm.buttonState="success";treeService.removeNode($scope.currentNode);navigationService.hideNavigation();notificationsService.success(labels[0])},function(err){vm.buttonState="error";notificationsService.error(labels[1],err.data.Message)})})}function cancelDelete(){navigationService.hideNavigation()}var vm=this,folderIdPrefix;vm.buttonState="init";vm.performDelete=performDelete;vm.cancelDelete=cancelDelete;folderIdPrefix="folder-";vm.deletingFolder=$scope.currentNode.id.startsWith(folderIdPrefix);vm.canDelete=!vm.deletingFolder;vm.title="";localizationService.localize("formDelete_title",[vm.deletingFolder?"folder":"form",$scope.currentNode.name]).then(function(val){vm.title=val});vm.deletingFolder&&formResource.isFolderEmpty(parseFolderId($scope.currentNode.id)).then(function(result){vm.canDelete=result.data})}angular.module("umbraco").controller("UmbracoForms.Editors.Form.DeleteController",Controller)}();angular.module("umbraco").controller("UmbracoForms.Editors.Form.EditController",function($scope,$routeParams,formResource,editorState,editorService,formService,notificationsService,contentEditingHelper,formHelper,navigationService,userService,securityResource,localizationService,providerLocalizationHelper){function createAndLocalizeApps(){localizationService.localizeMany(["general_design","general_settings"]).then(function(labels){$scope.page.contentApps.unshift({name:labels[1],alias:"settings",icon:"icon-settings",view:"/App_Plugins/UmbracoForms/backoffice/Form/views/settings/settings.html",active:!1});$scope.page.contentApps.unshift({name:labels[0],alias:"design",icon:"icon-document-dashed-line",view:"/App_Plugins/UmbracoForms/backoffice/Form/views/design/design.html",active:!0})})}function parseFolderId(id){return id.substring(7)}var currentUserId=null,currentFormSecurity=null;$scope.page={loading:!0};$scope.page.contentApps=[];$scope.hasAccessToCurrentForm=!0;$scope.displayEditor=!0;userService.getCurrentUser().then(function(response){currentUserId=response.id;securityResource.getByUserId(currentUserId).then(function(response){if($scope.security=response.data,currentFormSecurity=_.where(response.data.formsSecurity,{Form:$routeParams.id}),currentFormSecurity.length===1&&($scope.hasAccessToCurrentForm=currentFormSecurity[0].HasAccess),!$scope.hasAccessToCurrentForm||!$scope.security.userSecurity.manageForms){localizationService.localizeMany(["formPermissions_accessDeniedTitle","formEdit_accessDeniedMessage"]).then(function(labels){notificationsService.success(labels[0],labels[1])});navigationService.syncTree({tree:"form",path:["-1"],forceReload:!0,activate:!1}).then(function(response){navigationService.reloadNode(response.node)});return}})});$routeParams.create?formResource.getScaffoldWithWorkflows($routeParams.template).then(function(response){$scope.form=response.data;editorState.set($scope.form);$scope.page.contentApps=$scope.form.apps;createAndLocalizeApps();$scope.page.loading=!1}):($scope.workflowsUrl="#/forms/form/workflows/"+$routeParams.id,$scope.entriesUrl="#/forms/form/entries/"+$routeParams.id,formResource.getWithWorkflowsByGuid($routeParams.id).then(function(response){$scope.form=response.data;localizationService.localizeMany(providerLocalizationHelper.getLocalizationKeysForFormWorkflows($scope.form.formWorkflows)).then(function(labels){providerLocalizationHelper.applyLocalizationLabelsToFormWorkflows($scope.form.formWorkflows,labels);$scope.saved=!0;navigationService.syncTree({tree:"form",path:response.data.path.split(","),forceReload:!1});angular.forEach($scope.form.pages,function(page){angular.forEach(page.fieldSets,function(fieldSet){angular.forEach(fieldSet.containers,function(container){angular.forEach(container.fields,function(field){field.removePrevalueEditor=!0})})})});editorState.set($scope.form);$scope.page.contentApps=$scope.form.apps;createAndLocalizeApps();$scope.page.loading=!1})},function(reason){var jsonErrorResponse=reason.data;localizationService.localize("formEdit_unableToLoadForm").then(function(val){notificationsService.add({headline:val,message:jsonErrorResponse.ExceptionMessage,type:"error",sticky:!0})});$scope.displayEditor=!1}));$scope.editForm=function(form,section){editorService.open({template:"/App_Plugins/UmbracoForms/backoffice/Form/dialogs/formsettings.html",form:form,section:section,page:$scope.currentPage})};$scope.save=function(){formHelper.submitForm({scope:$scope})&&($scope.page.saveButtonState="busy",formService.syncContainerWidths($scope.form),$routeParams.create&&$routeParams.id!="-1"&&($scope.form.folderId=parseFolderId($routeParams.id)),formResource.saveWithWorkflows($scope.form).then(function(response){formHelper.resetForm({scope:$scope});contentEditingHelper.handleSuccessfulSave({scope:$scope,savedContent:response.data});$scope.ready=!0;editorState.set($scope.form);$scope.page.saveButtonState="success";navigationService.syncTree({tree:"form",path:response.data.path.split(","),forceReload:!0});localizationService.localize("formEdit_formSaved").then(function(val){notificationsService.success(val,"")})},function(err){formHelper.handleError(err);$scope.page.saveButtonState="error"}))}});angular.module("umbraco").controller("UmbracoForms.Editors.Form.EntriesController",function($scope,$routeParams,recordResource,formResource,editorService,userService,securityResource,notificationsService,navigationService,overlayService,localizationService){function nextPage(){$scope.filter.startIndex++;$scope.loadRecords($scope.filter)}function prevPage(){$scope.filter.startIndex--;$scope.loadRecords($scope.filter)}function goToPageNumber(pageNumber){$scope.filter.startIndex=pageNumber;$scope.loadRecords($scope.filter)}function viewEntryDetails(schema,entry,event){var entryIndex,entryCount,index;if(vm.selectedEntry={},entryIndex=$scope.records.results.indexOf(entry),entryCount=$scope.filter.length*($scope.filter.startIndex-1)+(entryIndex+1),vm.selectedEntry=entry,vm.selectedEntry.index=entryIndex,vm.selectedEntry.entryCount=entryCount,vm.selectedEntry.details=[],schema&&entry)for(index=0;index<schema.length;index++){var schemaItem=schema[index],valueItem=entry.fields[index],itemToPush={name:schemaItem.name,value:valueItem,view:schemaItem.view[0]==="~"||schemaItem.view[0]==="/"?schemaItem.view.replace("~/","/"):"/App_Plugins/UmbracoForms/backoffice/Common/RenderTypes/"+schemaItem.view+".html",containsSensitiveData:schemaItem.containsSensitiveData};["member","state","created","updated","recordId"].indexOf(schemaItem.id)===-1&&vm.selectedEntry.details.push(itemToPush)}localizationService.localize("formEntries_selectedEntryPaging",[vm.selectedEntry.entryCount,$scope.records.totalNumberOfResults]).then(function(val){vm.selectedEntryPaging=val});vm.showEntryDetails=!0;event&&event.stopPropagation()}function closeEntryDetails(){vm.selectedEntry={};vm.showEntryDetails=!1}function nextEntryDetails(){var nextEntryIndex=vm.selectedEntry.index+1,entriesCount=$scope.records.results.length,currentPage=$scope.filter.startIndex,totalNumberOfPages=$scope.records.totalNumberOfPages,entry;nextEntryIndex<entriesCount?(entry=$scope.records.results[nextEntryIndex],viewEntryDetails($scope.records.schema,entry)):totalNumberOfPages>1&&currentPage<totalNumberOfPages&&($scope.filter.startIndex++,vm.pagination.pageNumber++,recordResource.getRecords($scope.filter).then(function(response){$scope.records=response.data;$scope.allIsChecked=$scope.selectedRows.length>=$scope.records.results.length;vm.pagination.totalPages=response.data.totalNumberOfPages;limitRecordFields($scope.records);var entry=$scope.records.results[0];viewEntryDetails($scope.records.schema,entry)}))}function prevEntryDetails(){var prevEntryIndex=vm.selectedEntry.index-1,totalNumberOfPages=$scope.records.totalNumberOfPages,currentPage=$scope.filter.startIndex,entry;vm.selectedEntry.index>0?(entry=$scope.records.results[prevEntryIndex],viewEntryDetails($scope.records.schema,entry)):totalNumberOfPages>1&&currentPage!==1&&($scope.filter.startIndex--,vm.pagination.pageNumber--,recordResource.getRecords($scope.filter).then(function(response){$scope.records=response.data;$scope.allIsChecked=$scope.selectedRows.length>=$scope.records.results.length;vm.pagination.totalPages=response.data.totalNumberOfPages;limitRecordFields($scope.records);var lastEntryIndex=$scope.records.results.length-1,entry=$scope.records.results[lastEntryIndex];viewEntryDetails($scope.records.schema,entry)}))}function datePickerChange(dateRange){$scope.filter.startDate=dateRange.startDate;$scope.filter.endDate=dateRange.endDate;$scope.filterChanged()}function toggleRecordState(recordState){if(recordState.isChecked)$scope.filter.states.push(recordState.name);else{var index=$scope.filter.states.indexOf(recordState.name);index!==-1&&$scope.filter.states.splice(index,1)}$scope.filterChanged()}function limitRecordFields(records){var falseFromIndex=2,falseToIndex=records.schema.length-5,trueFalseArray=[];angular.forEach(records.schema,function(schema,index){(index<=falseFromIndex||index>=falseToIndex)&&schema.showOnListingScreen?trueFalseArray.push(!0):trueFalseArray.push(!1)});records.showSchemaArray=trueFalseArray;angular.forEach(records.results,function(result){result.showRecordsArray=trueFalseArray})}var currentUserId=null,currentFormSecurity=null,vm=this;vm.pagination={pageNumber:1,totalPages:1};vm.allIsChecked=!1;vm.selectedEntry={};vm.showEntryDetails=!1;vm.userLocale="";vm.nextPage=nextPage;vm.prevPage=prevPage;vm.goToPageNumber=goToPageNumber;vm.viewEntryDetails=viewEntryDetails;vm.closeEntryDetails=closeEntryDetails;vm.nextEntryDetails=nextEntryDetails;vm.prevEntryDetails=prevEntryDetails;vm.datePickerChange=datePickerChange;vm.toggleRecordState=toggleRecordState;vm.canEditSensitiveData=!1;vm.keyboardShortcutsOverview=[];localizationService.localizeMany(["formEntries_entryDetails","formEntries_nextEntry","formEntries_previousEntry","formEntries_closeDetails"]).then(function(labels){vm.keyboardShortcutsOverview.push({name:labels[0],shortcuts:[{description:labels[1],keys:[{key:"→"}]},{description:labels[2],keys:[{key:"←"}]},{description:labels[3],keys:[{key:"esc"}]}]})});vm.title="";$scope.hasAccessToCurrentForm=!0;userService.getCurrentUser().then(function(response){currentUserId=response.id;vm.userLocale=response.locale;vm.canEditSensitiveData=response.userGroups.indexOf("sensitiveData")!==-1;securityResource.getByUserId(currentUserId).then(function(response){if($scope.security=response.data,currentFormSecurity=_.where(response.data.formsSecurity,{Form:$routeParams.id}),currentFormSecurity.length===1&&($scope.hasAccessToCurrentForm=currentFormSecurity[0].HasAccess),!$scope.hasAccessToCurrentForm||!$scope.security.userSecurity.manageForms){localizationService.localizeMany(["formPermissions_accessDeniedTitle","formEntries_accessDeniedMessage"]).then(function(labels){notificationsService.success(labels[0],labels[1])});navigationService.syncTree({tree:"form",path:["-1"],forceReload:!0,activate:!1}).then(function(response){navigationService.reloadNode(response.node)});return}})});formResource.getWithWorkflowsByGuid($routeParams.id).then(function(response){$scope.form=response.data;$scope.loaded=!0;localizationService.localize("formEntries_title",[$scope.form.name]).then(function(val){vm.title=val});var path=$scope.form.path.split(",");path.push(path[path.length-1]+"_entries");navigationService.syncTree({tree:"form",path:path,forceReload:!1});recordResource.getRecordSetActions().then(function(response){$scope.recordSetActions=response.data.filter(function(action){return $scope.form.manualApproval||action.isAvailableForApprovedRecords})})});$scope.states=[{name:"Approved",isChecked:!0},{name:"Submitted",isChecked:!0}];$scope.filter={startIndex:1,length:20,form:$routeParams.id,sortBy:"created",sortOrder:"descending",states:["Approved","Submitted"],localTimeOffset:(new Date).getTimezoneOffset()};$scope.records=[];$scope.loading=!1;$scope.toggleRecordStateSelection=function(recordState){var idx=$scope.filter.states.indexOf(recordState);idx>-1?$scope.filter.states.splice(idx,1):$scope.filter.states.push(recordState)};$scope.hiddenFields=[2];$scope.toggleSelection=function(field){var idx=$scope.hiddenFields.indexOf(field);idx>-1?$scope.hiddenFields.splice(idx,1):$scope.hiddenFields.push(field)};$scope.edit=function(schema){editorService.open({view:"/App_Plugins/UmbracoForms/backoffice/Form/dialogs/entriessettings.html",schema:schema,toggle:$scope.toggleSelection,hiddenFields:$scope.hiddenFields,filter:$scope.filter,size:"medium"})};$scope.next=function(){$scope.filter.startIndex++};$scope.prev=function(){$scope.filter.startIndex--};$scope.goToPage=function(index){$scope.filter.startIndex=index};$scope.search=_.debounce(function(resetIndex){$scope.loading=!0;$scope.reset(resetIndex);$scope.$apply(function(){recordResource.getRecords($scope.filter).then(function(response){$scope.loading=!1;$scope.records=response.data;vm.pagination.totalPages=response.data.totalNumberOfPages;limitRecordFields($scope.records)})})},300);$scope.filterChanged=function(){$scope.search(!0)};$scope.loadRecords=function(filter,append){$scope.loading=!0;recordResource.getRecords(filter).then(function(response){$scope.loading=!1;$scope.records=append?$scope.records.results.concat(response.data.results):response.data;$scope.allIsChecked=$scope.selectedRows.length>=$scope.records.results.length;limitRecordFields($scope.records);vm.pagination.totalPages=response.data.totalNumberOfPages})};$scope.loadRecords($scope.filter);$scope.reset=function(resetIndex){$scope.selectedRows.length=0;$scope.allIsChecked=!1;resetIndex&&($scope.filter.startIndex=1)};$scope.clearSelection=function(){var i,row;for($scope.selectedRows.length=0,vm.allIsChecked=!1,i=0;i<$scope.records.results.length;i++)row=$scope.records.results[i],row.selected=!1};$scope.more=function(){$scope.filter.startIndex++;$scope.loadRecords($scope.filter,!0)};$scope.selectedRows=[];$scope.toggleRow=function(row){if(row.selected=!row.selected,row.selected)$scope.selectedRows.push(row.id),$scope.allIsChecked=$scope.selectedRows.length>=$scope.records.results.length;else{var i=$scope.selectedRows.indexOf(row.id);$scope.selectedRows.splice(i,1);$scope.allIsChecked=!1}localizationService.localize("formEntries_selectedRowsDescription",[$scope.selectedRows.length,$scope.records.totalNumberOfResults]).then(function(val){$scope.selectedRowsDescription=val})};$scope.toggleRowLegacy=function(row){if(row.selected)$scope.selectedRows.push(row.id),$scope.allIsChecked=$scope.selectedRows.length>=$scope.records.results.length;else{var i=$scope.selectedRows.indexOf(row.id);$scope.selectedRows.splice(i,1);$scope.allIsChecked=!1}};$scope.allIsChecked=!1;$scope.toggleAllLegacy=function($event){var checkbox=$event.target,i,entity;for($scope.selectedRows.length=0,i=0;i<$scope.records.results.length;i++)entity=$scope.records.results[i],entity.selected=checkbox.checked,checkbox.checked&&$scope.selectedRows.push(entity.id)};$scope.toggleAll=function(){for(var entity,newValue=!$scope.allIsChecked,i=0;i<$scope.records.results.length;i++)entity=$scope.records.results[i],entity.selected!==newValue&&$scope.toggleRow(entity)};$scope.executeRecordSetAction=function(action){var model={formId:$scope.form.id,recordKeys:$scope.selectedRows,actionId:action.id},performAction=function(){$scope.recordSetActionExecuting=!0;localizationService.localizeMany(["formEntries_executeCompleteTitle","formEntries_executeSuccessMessage","formEntries_executeErrorMessage"]).then(function(labels){recordResource.executeRecordSetAction(model).then(function(){$scope.reset(!0);$scope.loadRecords($scope.filter,!1);$scope.recordSetActionExecuting=!1;notificationsService.success(labels[0],labels[1].replace("%0%",action.name))},function(err){notificationsService.error(labels[0],labels[2].replace("%0%",action.name).replace("%1%",err))})})},presentConfirmation=function(confirmMessage){var overlay={view:"confirm",title:"Confirmation",content:confirmMessage,closeButtonLabel:"No",submitButtonLabel:"Yes",submitButtonStyle:"danger",close:function(){overlayService.close()},submit:function(){performAction();overlayService.close()}};overlayService.open(overlay)};action.needsConfirm&&action.confirmMessage.length>0?action.confirmMessage[0]==="@"?localizationService.localize(action.confirmMessage).then(function(val){presentConfirmation(val)}):presentConfirmation(action.confirmMessage):performAction()}});angular.module("umbraco").controller("UmbracoForms.Editors.Form.EntriesSettingsController",function($scope,$log,$timeout,exportResource,utilityService,editorService,localizationService,providerLocalizationHelper){var formId=$scope.model.filter.form;exportResource.getExportTypes(formId).then(function(response){$scope.exportTypes=response.data;localizationService.localizeMany(providerLocalizationHelper.getLocalizationKeys("formProviderExportTypes",$scope.exportTypes)).then(function(labels){providerLocalizationHelper.applyLocalizationLabels($scope.exportTypes,labels)})});$scope.close=function(){editorService.closeAll()};$scope.export=function(type,filter){if(!$scope.exporting){$scope.exporting=!0;filter.exportType=type.id;var serverTimeNeedsOffsetting=utilityService.serverTimeNeedsOffsetting();serverTimeNeedsOffsetting&&(filter.localTimeOffset=(new Date).getTimezoneOffset());exportResource.generateExport(filter).then(function(response){var url=exportResource.getExportUrl(response.data.formId,response.data.fileName),iframe=document.createElement("iframe");iframe.id="hiddenDownloadframe";iframe.style.display="none";document.body.appendChild(iframe);iframe.src=url;$timeout(function(){document.body.removeChild(iframe);$scope.exporting=!1},1e3)})}}});angular.module("umbraco").controller("UmbracoForms.Editors.Form.MoveController",function($scope,formResource,treeService,navigationService,eventsService,notificationsService,formsValidationService,localizationService){function nodeSelectHandler(args){args.event.preventDefault();args.event.stopPropagation();$scope.target&&($scope.target.selected=!1);$scope.target=args.node;$scope.target.selected=!0}function parseFolderId(id){return id.substring(folderIdPrefix.length)}$scope.dialogTreeApi={};$scope.source=_.clone($scope.currentNode);$scope.title="";$scope.successMessage="";localizationService.localize("formMove_title",[$scope.source.name]).then(function(val){$scope.title=val});var folderIdPrefix="folder-",movingFolder=$scope.currentNode.id.startsWith(folderIdPrefix);$scope.move=function(){$scope.errorMessage=null;var handleSuccess=function(type,path){$scope.errorMessage=null;treeService.removeNode($scope.currentNode);navigationService.syncTree({tree:"form",path:path.split(","),forceReload:!0,activate:!0});localizationService.localize("formMove_successMessage",[$scope.source.name,$scope.target.name]).then(function(val){$scope.successMessage=val});localizationService.localizeMany(["formMove_successNotificationHeader","formMove_successNotificationDescriptionForForm","formMove_successNotificationDescriptionForFolder"]).then(function(labels){notificationsService.showNotification({type:0,header:labels[0],message:type==="form"?labels[1]:labels[2]})});navigationService.hideMenu();eventsService.emit("app.refreshEditor")},handleError=function(err){$scope.errorMessage=formsValidationService.getErrorMessageFromExceptionResponse(err)};movingFolder?formResource.moveFolder($scope.target.id,parseFolderId($scope.source.id)).then(function(response){handleSuccess("folder",response.data)},function(err){handleError(err)}):formResource.moveForm($scope.target.id,$scope.source.id).then(function(response){handleSuccess("form",response.data)},function(err){handleError(err)})};$scope.onTreeInit=function(){$scope.dialogTreeApi.callbacks.treeNodeSelect(nodeSelectHandler)};$scope.close=function(){navigationService.hideDialog()}}),function(){"use strict";function Controller($scope,formResource,navigationService,formHelper,notificationsService,formsValidationService,localizationService){function parseFolderId(id){return id.substring(folderIdPrefix.length)}function performRename(){vm.deletingFolder&&(vm.errorMessage=null,formHelper.submitForm({scope:$scope,formCtrl:$scope.renameForm})&&formResource.renameFolder(parseFolderId(node.id),vm.newName).then(function(){var path=$scope.currentNode.path;navigationService.syncTree({tree:"form",path:path.split(","),forceReload:!0,activate:!0});localizationService.localizeMany(["formRename_successNotificationHeader","formRename_successNotificationDescriptionForFolder"]).then(function(labels){notificationsService.showNotification({type:0,header:labels[0],message:labels[1]})});navigationService.hideMenu()},function(err){formHelper.resetForm({scope:$scope,formCtrl:$scope.createFolderForm,hasErrors:!0});vm.errorMessage=formsValidationService.getErrorMessageFromExceptionResponse(err)}))}function cancelRename(){navigationService.hideNavigation()}var vm=this,node,folderIdPrefix;vm.buttonState="init";vm.errorMessage=null;node=$scope.currentNode;vm.newName=node.name;vm.performRename=performRename;vm.cancelRename=cancelRename;folderIdPrefix="folder-";vm.deletingFolder=$scope.currentNode.id.startsWith(folderIdPrefix)}angular.module("umbraco").controller("UmbracoForms.Editors.Form.RenameController",Controller)}(),function(){"use strict";function FieldsetSettingsOverlay($scope,formService,editorService,localizationService){function init(){vm.actionTypes=formService.getActionTypes();vm.logicTypes=formService.getLogicTypes();vm.operators=formService.getOperators();localizeConditionSelectors(vm.actionTypes,"actionType");localizeConditionSelectors(vm.logicTypes,"logicType");localizeConditionSelectors(vm.operators,"operator");localizeLabels&&localizeLabels.then(function(){});$scope.model.fieldset.condition||($scope.model.fieldset.condition={},$scope.model.fieldset.condition.actionType=vm.actionTypes[0].value,$scope.model.fieldset.condition.logicType=vm.logicTypes[0].value);oldFieldset=angular.copy($scope.model.fieldset);oldContainers=angular.copy($scope.model.fieldset.containers);setColumnCountDescription()}function localizeConditionSelectors(types,key){var keys,i;if(types){for(keys=[],i=0;i<types.length;i++)keys.push("formConditions_"+key+types[i].value);localizationService.localizeMany(keys).then(function(labels){for(var i=0;i<labels.length;i++)types[i].name=labels[i]})}}function deleteConditionRule(rules,rule){formService.deleteConditionRule(rules,rule)}function toggleConditions(){$scope.model.fieldset.condition.enabled=!$scope.model.fieldset.condition.enabled}function addConditionRule(condition){formService.addEmptyConditionRule(condition);var lastIndex=condition.rules.length-1;condition.rules[lastIndex].operator=vm.operators[0].value}function conditionFieldSelected(selectedField,rule){formService.populateConditionRulePrevalues(selectedField,rule,$scope.model.fields)}function canAddColumn(){var index=$scope.model.fieldset.containers.length;return index<parseInt(Umbraco.Sys.ServerVariables.umbracoPlugins.forms.maxNumberOfColumnsInFormGroup)}function addColumn(){if(canAddColumn()){var index=$scope.model.fieldset.containers.length;formService.addContainer($scope.model.fieldset,index);setColumnCountDescription()}}function removeColumn(container){formService.deleteContainer($scope.model.fieldset,container);setColumnCountDescription()}function setColumnCountDescription(){if($scope.model.fieldset.containers){var tokens=[$scope.model.fieldset.containers.length];localizationService.localize("fieldSetColumns_columnNumberDescription",tokens).then(function(val){vm.fieldSetContainersDescription=val})}}function close(){$scope.model.fieldset.containers=oldContainers;$scope.model.fieldset=oldFieldset;editorService.close()}function submit(){editorService.close()}var vm=this;vm.actionTypes=[];vm.logicTypes=[];vm.operators=[];vm.deleteConditionRule=deleteConditionRule;vm.addConditionRule=addConditionRule;vm.conditionFieldSelected=conditionFieldSelected;vm.canAddColumn=canAddColumn;vm.addColumn=addColumn;vm.removeColumn=removeColumn;vm.toggleConditions=toggleConditions;vm.close=close;vm.submit=submit;vm.labels={};vm.enableConditionsToggleText="";vm.fieldSetContainersDescription="";var localizeLabels=localizationService.localize("formConditions_enableConditions").then(function(val){vm.enableConditionsToggleText=val}),oldFieldset="",oldContainers="";init()}angular.module("umbraco").controller("UmbracoForms.Overlays.FieldsetSettingsOverlay",FieldsetSettingsOverlay)}(),function(){"use strict";function FieldSettingsOverlay($scope,localizationService,formService,userService,editorService,formHelper){function activate(){vm.actionTypes=formService.getActionTypes();vm.logicTypes=formService.getLogicTypes();vm.operators=formService.getOperators();localizeConditionSelectors(vm.actionTypes,"actionType");localizeConditionSelectors(vm.logicTypes,"logicType");localizeConditionSelectors(vm.operators,"operator");localizeLabels.then(function(){});userService.getCurrentUser().then(function(user){vm.canEditSensitiveData=user.userGroups.indexOf("sensitiveData")!==-1;vm.loading=!1});$scope.model.field.condition||($scope.model.field.condition={},$scope.model.field.condition.actionType=vm.actionTypes[0].value,$scope.model.field.condition.logicType=vm.logicTypes[0].value);matchValidationType();$scope.model.field.prevalueSourceId||($scope.model.field.prevalueSourceId="00000000-0000-0000-0000-000000000000")}function localizeConditionSelectors(types,key){var keys,i;if(types){for(keys=[],i=0;i<types.length;i++)keys.push("formConditions_"+key+types[i].value);localizationService.localizeMany(keys).then(function(labels){for(var i=0;i<labels.length;i++)types[i].name=labels[i]})}}function changeValidationPattern(){matchValidationType()}function openFieldTypePicker(field){vm.focusOnMandatoryField=!1;var fieldTypePicker={view:"/App_Plugins/UmbracoForms/backoffice/Form/overlays/fieldtypepicker/field-type-picker.html",title:"Choose answer type",hideSubmitButton:!0,size:"medium",submit:function(model){formService.loadFieldTypeSettings(field,model.fieldType);field.removePrevalueEditor=!0;editorService.close()},close:function(){editorService.close()}};editorService.open(fieldTypePicker)}function matchValidationType(){if($scope.model.field.regex!==null&&$scope.model.field.regex!==""&&$scope.model.field.regex!==undefined)return localizeValidation.then(function(){var match=!1;angular.forEach(vm.validationTypes,function(validationType){$scope.model.field.regex===validationType.pattern&&(vm.selectedValidationType=validationType,vm.showValidationPattern=!0,match=!0)});match||angular.forEach(vm.validationTypes,function(validationType){validationType.key==="custom"&&(vm.selectedValidationType=validationType,vm.showValidationPattern=!0)})})}function toggleConditions(){$scope.model.field.condition.enabled=!$scope.model.field.condition.enabled}function toggleSensitiveData(){$scope.model.field.containsSensitiveData=!$scope.model.field.containsSensitiveData}function toggleMandatory(){$scope.model.field.mandatory=!$scope.model.field.mandatory}function toggleAllowMultipleFileUploads(){$scope.model.field.allowMultipleFileUploads=!$scope.model.field.allowMultipleFileUploads}function changeValidationType(selectedValidationType){selectedValidationType?($scope.model.field.regex=selectedValidationType.pattern,vm.showValidationPattern=!0,selectedValidationType.key==="custom"&&(vm.focusOnPatternField=!0)):($scope.model.field.regex="",vm.showValidationPattern=!1)}function conditionFieldSelected(selectedField,rule){formService.populateConditionRulePrevalues(selectedField,rule,$scope.model.fields)}function deleteConditionRule(rules,rule){formService.deleteConditionRule(rules,rule)}function addConditionRule(condition){formService.addEmptyConditionRule(condition);var lastIndex=condition.rules.length-1;condition.rules[lastIndex].operator=vm.operators[0].value}function getPrevalues(field){formService.loadFieldTypePrevalues(field)}function submitOnEnter(event){event&&event.keyCode===13&&submit()}function submit(){$scope.model.submit&&formHelper.submitForm({scope:$scope})&&$scope.model.submit($scope.model)}function close(){$scope.model.close&&$scope.model.close()}var vm=this,localizeValidation,localizeLabels,i;for(vm.showValidationPattern=!1,vm.focusOnPatternField=!1,vm.focusOnMandatoryField=!1,vm.canEditSensitiveData=!1,vm.loading=!0,vm.selectedValidationType={},vm.actionTypes=[],vm.logicTypes=[],vm.operators=[],vm.mandatoryToggleText="",vm.sensitiveDataToggleText="",vm.enableConditionsToggleText="",vm.multipleFilesToggleTextOn="",vm.multipleFilesToggleTextOff="",localizeValidation=localizationService.localizeMany(["validation_validateAsEmail","validation_validateAsNumber","validation_validateAsUrl","validation_enterCustomValidation","validation_fieldIsMandatory"]).then(function(labels){vm.validationTypes=[{name:labels[0],key:"email",pattern:"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$",enableEditing:!0},{name:labels[1],key:"number",pattern:"^[0-9]*$",enableEditing:!0},{name:labels[2],key:"url",pattern:"https?://[a-zA-Z0-9-.]+.[a-zA-Z]{2,}",enableEditing:!0},{name:labels[3],key:"custom",pattern:"",enableEditing:!0}];vm.mandatoryToggleText=labels[4]}),localizeLabels=localizationService.localizeMany(["fieldSettings_sensitiveDataLabel","formConditions_enableConditions","fieldSettings_multipleFilesToggleTextOn","fieldSettings_multipleFilesToggleTextOff"]).then(function(labels){vm.sensitiveDataToggleText=labels[0];vm.enableConditionsToggleText=labels[1];vm.multipleFilesToggleTextOn=labels[2];vm.multipleFilesToggleTextOff=labels[3]}),vm.changeValidationType=changeValidationType,vm.changeValidationPattern=changeValidationPattern,vm.openFieldTypePicker=openFieldTypePicker,vm.deleteConditionRule=deleteConditionRule,vm.addConditionRule=addConditionRule,vm.getPrevalues=getPrevalues,vm.conditionFieldSelected=conditionFieldSelected,vm.submitOnEnter=submitOnEnter,vm.submit=submit,vm.close=close,vm.toggleConditions=toggleConditions,vm.toggleMandatory=toggleMandatory,vm.toggleSensitiveData=toggleSensitiveData,vm.toggleAllowMultipleFileUploads=toggleAllowMultipleFileUploads,vm.matchValidationType=matchValidationType,vm.fieldConditions=angular.copy($scope.model.fields),i=0;i<vm.fieldConditions.length;i++)if(vm.fieldConditions[i].id===$scope.model.field.id){vm.fieldConditions.splice(i,1);break}activate()}angular.module("umbraco").controller("UmbracoForms.Overlays.FieldSettingsOverlay",FieldSettingsOverlay)}(),function(){"use strict";function FieldTypePickerOverlayController($scope,formResource,localizationService,providerLocalizationHelper){function init(){formResource.getAllFieldTypesWithSettings().then(function(response){vm.fieldTypes=response.data;localizationService.localizeMany(providerLocalizationHelper.getLocalizationKeys("formProviderFieldTypes",vm.fieldTypes)).then(function(labels){providerLocalizationHelper.applyLocalizationLabels(vm.fieldTypes,labels)})})}function pickFieldType(selectedFieldType){$scope.model.fieldType=selectedFieldType;$scope.model.submit($scope.model)}function filterItems(){$scope.model.itemDetails=null}function showDetailsOverlay(workflowType){var workflowDetails={};workflowDetails.icon=workflowType.icon;workflowDetails.title=workflowType.name;workflowDetails.description=workflowType.description;$scope.model.itemDetails=workflowDetails}function hideDetailsOverlay(){$scope.model.itemDetails=null}function close(){$scope.model.close&&$scope.model.close()}var vm=this;vm.fieldTypes=[];vm.searchTerm="";vm.pickFieldType=pickFieldType;vm.filterItems=filterItems;vm.showDetailsOverlay=showDetailsOverlay;vm.hideDetailsOverlay=hideDetailsOverlay;vm.close=close;init()}angular.module("umbraco").controller("UmbracoForms.Overlays.FieldTypePickerOverlayController",FieldTypePickerOverlayController)}(),function(){"use strict";function FormPickerOverlayController($scope,$http,formPickerResource){function onInit(){vm.loading=!0;$scope.model.title||($scope.model.title="Select a form");$scope.model.multiPicker||($scope.model.hideSubmitButton=!0);$scope.model.selectedForms||($scope.model.selectedForms=[]);formPickerResource.getFormsForPicker($scope.model.allowedForms||null).then(function(response){vm.forms=response;vm.loading=!1},function(){vm.error="An Error has occured while loading!";vm.loading=!1})}function pickForm(form){form.selected?(form.selected=!1,angular.forEach($scope.model.selectedForms,function(selectedForm,index){selectedForm.id===form.id&&$scope.model.selectedForms.splice(index,1)})):(form.selected=!0,$scope.model.selectedForms.push(form),$scope.model.multiPicker||$scope.model.submit($scope.model))}var vm=this;vm.loading=!1;vm.forms=[];vm.error=null;vm.pickForm=pickForm;onInit()}angular.module("umbraco").controller("UmbracoForms.FormPickerOverlayController",FormPickerOverlayController)}(),function(){"use strict";function PageSettingsOverlay($scope,formService,editorService,localizationService){function init(){vm.actionTypes=formService.getActionTypes();vm.logicTypes=formService.getLogicTypes();vm.operators=formService.getOperators();localizeConditionSelectors(vm.actionTypes,"actionType");localizeConditionSelectors(vm.logicTypes,"logicType");localizeConditionSelectors(vm.operators,"operator");localizeLabels.then(function(){});oldButtonCondition=angular.copy($scope.model.page.buttonCondition);$scope.model.page.buttonCondition||($scope.model.page.buttonCondition={},$scope.model.page.buttonCondition.actionType=vm.actionTypes[0].value,$scope.model.page.buttonCondition.logicType=vm.logicTypes[0].value)}function localizeConditionSelectors(types,key){var keys,i;if(types){for(keys=[],i=0;i<types.length;i++)keys.push("formConditions_"+key+types[i].value);localizationService.localizeMany(keys).then(function(labels){for(var i=0;i<labels.length;i++)types[i].name=labels[i]})}}function deleteConditionRule(rules,rule){formService.deleteConditionRule(rules,rule)}function toggleConditions(){$scope.model.page.buttonCondition.enabled=!$scope.model.page.buttonCondition.enabled}function addConditionRule(condition){formService.addEmptyConditionRule(condition);var lastIndex=condition.rules.length-1;condition.rules[lastIndex].operator=vm.operators[0].value}function conditionFieldSelected(selectedField,rule){formService.populateConditionRulePrevalues(selectedField,rule,$scope.model.fields)}function close(){$scope.model.page.buttonCondition=oldButtonCondition;editorService.close()}function submit(){editorService.close()}var vm=this,localizeLabels,oldButtonCondition;vm.actionTypes=[];vm.logicTypes=[];vm.operators=[];vm.deleteConditionRule=deleteConditionRule;vm.addConditionRule=addConditionRule;vm.conditionFieldSelected=conditionFieldSelected;vm.toggleConditions=toggleConditions;vm.close=close;vm.submit=submit;vm.enableConditionsToggleText="";localizeLabels=localizationService.localize("formConditions_enableConditions").then(function(val){vm.enableConditionsToggleText=val});init()}angular.module("umbraco").controller("UmbracoForms.Overlays.PageSettingsOverlay",PageSettingsOverlay)}(),function(){"use strict";function ThemePickerOverlayController($scope,themePickerResource){function onInit(){vm.loading=!0;$scope.model.title||($scope.model.title="Select a theme");$scope.model.multiPicker||($scope.model.hideSubmitButton=!0);$scope.model.selectedThemes||($scope.model.selectedThemes=[]);themePickerResource.getThemes().then(function(response){vm.themes=response;vm.loading=!1},function(){vm.error="An Error has occured while loading!";vm.loading=!1})}function pickTheme(theme){theme.selected?(theme.selected=!1,angular.forEach($scope.model.selectedThemes,function(selectedTheme,index){selectedTheme.name===theme.name&&$scope.model.selectedThemes.splice(index,1)})):(theme.selected=!0,$scope.model.selectedThemes.push(theme),$scope.model.multiPicker||$scope.model.submit($scope.model))}var vm=this;vm.loading=!1;vm.themes=[];vm.error=null;vm.pickTheme=pickTheme;onInit()}angular.module("umbraco").controller("UmbracoForms.ThemePickerOverlayController",ThemePickerOverlayController)}(),function(){"use strict";function WorkflowSettingsOverlayController($scope,workflowResource,localizationService,providerLocalizationHelper){var vm=this,prepareDataForEdit;vm.workflowTypes=[];vm.focusWorkflowName=!0;prepareDataForEdit=function(){$scope.model.workflow.includeSensitiveData=$scope.model.workflow.includeSensitiveData==1?!0:!1;localizationService.localizeMany(providerLocalizationHelper.getLocalizationKeys("formProviderWorkflows",[$scope.model.workflow],$scope.model.workflow.workflowTypeName)).then(function(labels){providerLocalizationHelper.applyLocalizationLabels([$scope.model.workflow],labels,!0)})};$scope.model.workflow&&prepareDataForEdit();$scope.model.workflowType&&$scope.model.workflowType.id&&workflowResource.getScaffoldWorkflowType($scope.model.workflowType.id).then(function(response){$scope.model.workflow=response.data;prepareDataForEdit()});vm.toggleActive=function(){$scope.model.workflow.active=!$scope.model.workflow.active;$scope.workflowSettingsForm.$setDirty()};vm.toggleIncludeSensitiveData=function(){$scope.model.workflow.includeSensitiveData=!$scope.model.workflow.includeSensitiveData;$scope.workflowSettingsForm.$setDirty()};vm.close=function(){$scope.model.close($scope.workflowSettingsForm.$dirty)};vm.submit=function(){$scope.model.submit($scope.model)}}angular.module("umbraco").controller("UmbracoForms.Overlays.WorkflowSettingsOverlayController",WorkflowSettingsOverlayController)}(),function(){"use strict";function WorkflowsOverviewOverlayController($scope,workflowResource,notificationsService,editorService,overlayService,localizationService){function updateSortOrder(array){for(var arrayItem,sortOrder=0,i=0;i<array.length;i++)arrayItem=array[i],arrayItem.isDeleted===!1&&(arrayItem.sortOrder=sortOrder,sortOrder++)}function openWorkflowsTypesOverlay(workflowTypeArray){localizationService.localize("formWorkflows_chooseWorkflow").then(function(val){var workflowsTypesOverlay={view:"/App_Plugins/UmbracoForms/backoffice/Form/overlays/workflows/workflow-types.html",title:val,fields:$scope.model.fields,size:"medium",submit:function(model){workflowTypeArray.push(model.workflow);updateSortOrder(workflowTypeArray);editorService.close()},close:function(){editorService.close()}};editorService.open(workflowsTypesOverlay)})}function editWorkflow(workflow,collection,index){var preEditedWorkflow=JSON.parse(JSON.stringify(workflow)),workflowSettingsOverlay={view:"/App_Plugins/UmbracoForms/backoffice/Form/overlays/workflows/workflow-settings.html",title:workflow.name,workflow:workflow,fields:$scope.model.fields,size:"medium",submit:function(model){workflowResource.validateWorkflowSettings(model.workflow).then(function(response){response.data.length>0?angular.forEach(response.data,function(error){notificationsService.error("Workflow failed to save",error.Message)}):editorService.close()})},close:function(hasChanges){hasChanges?localizationService.localizeMany(["formWorkflows_closeConfirmationTitle","formWorkflows_closeConfirmationMessage","general_no","general_yes"]).then(function(labels){var overlay={view:"confirm",title:labels[0],content:labels[1],closeButtonLabel:labels[2],submitButtonLabel:labels[3],submitButtonStyle:"danger",close:function(){overlayService.close()},submit:function(){$scope.model.formWorkflows[collection][index]=preEditedWorkflow;overlayService.close();editorService.close()}};overlayService.open(overlay)}):editorService.close()}};editorService.open(workflowSettingsOverlay)}function editSubmitMessageWorkflow(){localizationService.localize("formWorkflows_messageOnSubmit").then(function(val){var submitMessageWorkflowOverlay={view:"/App_Plugins/UmbracoForms/backoffice/Form/overlays/workflows/submit-message-workflow-settings.html",title:val,messageOnSubmit:$scope.model.messageOnSubmit,goToPageOnSubmit:$scope.model.goToPageOnSubmit,size:"medium",submit:function(model){$scope.model.messageOnSubmit=model.messageOnSubmit;$scope.model.goToPageOnSubmit=model.goToPageOnSubmit;editorService.close()},close:function(){editorService.close()}};editorService.open(submitMessageWorkflowOverlay)})}function removeWorkflow(workflow,event,workflowTypeArray){workflow.isDeleted=!0;updateSortOrder(workflowTypeArray);event.stopPropagation()}var vm=this;vm.focusOverlay=!0;vm.openWorkflowsTypesOverlay=openWorkflowsTypesOverlay;vm.editWorkflow=editWorkflow;vm.removeWorkflow=removeWorkflow;vm.editSubmitMessageWorkflow=editSubmitMessageWorkflow;$scope.model.formWorkflows.onSubmit||($scope.model.formWorkflows.onSubmit=[]);$scope.model.formWorkflows.onApprove||($scope.model.formWorkflows.onApprove=[]);vm.workflowsSortableOptions={distance:10,tolerance:"pointer",connectWith:".umb-forms-workflows__sortable-wrapper",opacity:.7,scroll:!0,cursor:"move",zIndex:6e3,handle:".sortable-handle",items:".sortable",placeholder:"umb-forms-workflow__workflow-placeholder",start:function(e,ui){ui.placeholder.height(ui.item.height())},stop:function(){updateSortOrder($scope.model.formWorkflows.onSubmit);updateSortOrder($scope.model.formWorkflows.onApprove)}};vm.close=function(){$scope.model.close()};vm.submit=function(){$scope.model.submit($scope.model)}}angular.module("umbraco").controller("UmbracoForms.Overlays.WorkflowsOverviewOverlayController",WorkflowsOverviewOverlayController)}(),function(){"use strict";function WorkflowTypesOverlayController($scope,workflowResource,notificationsService,editorService,overlayService,localizationService,providerLocalizationHelper){function init(){workflowResource.getAllWorkflowTypesWithSettings().then(function(response){vm.workflowTypes=response.data;setDefaultWorkflowIcon(vm.workflowTypes);localizationService.localizeMany(providerLocalizationHelper.getLocalizationKeys("formProviderWorkflows",vm.workflowTypes)).then(function(labels){providerLocalizationHelper.applyLocalizationLabels(vm.workflowTypes,labels)})})}function setDefaultWorkflowIcon(workflowTypes){for(var workflowType,i=0;i<workflowTypes.length;i++)workflowType=workflowTypes[i],workflowType.icon||(workflowType.icon="icon-mindmap")}function pickWorkflowType(selectedWorkflowType){var workflowSettingsOverlay={view:"/App_Plugins/UmbracoForms/backoffice/Form/overlays/workflows/workflow-settings.html",title:selectedWorkflowType.name,workflow:$scope.model.workflow,workflowType:selectedWorkflowType,fields:$scope.model.fields,size:"medium",submit:function(model){workflowResource.validateWorkflowSettings(model.workflow).then(function(response){response.data.length>0?angular.forEach(response.data,function(error){notificationsService.error("Workflow failed to save",error.Message)}):($scope.model.workflow=model.workflow,$scope.model.submit($scope.model),editorService.close())})},close:function(hasChanges){hasChanges?localizationService.localizeMany(["formWorkflows_closeConfirmationTitle","formWorkflows_closeConfirmationMessage","general_no","general_yes"]).then(function(labels){var overlay={view:"confirm",title:labels[0],content:labels[1],closeButtonLabel:labels[2],submitButtonLabel:labels[3],submitButtonStyle:"danger",close:function(){overlayService.close()},submit:function(){overlayService.close();editorService.close()}};overlayService.open(overlay)}):editorService.close()}};editorService.open(workflowSettingsOverlay)}function filterItems(){$scope.model.itemDetails=null}function showDetailsOverlay(workflowType){var workflowDetails={};workflowDetails.icon=workflowType.icon;workflowDetails.title=workflowType.name;workflowDetails.description=workflowType.description;$scope.model.itemDetails=workflowDetails}function hideDetailsOverlay(){$scope.model.itemDetails=null}var vm=this;vm.workflowTypes=[];vm.searchTerm="";vm.pickWorkflowType=pickWorkflowType;vm.filterItems=filterItems;vm.showDetailsOverlay=showDetailsOverlay;vm.hideDetailsOverlay=hideDetailsOverlay;vm.close=function(){$scope.model.close()};init()}angular.module("umbraco").controller("UmbracoForms.Overlays.WorkflowTypesOverlayController",WorkflowTypesOverlayController)}(),function(){"use strict";function formDesignController(formResource,userService,securityResource,localizationService,providerLocalizationHelper){var vm=this,currentUser={};vm.currentPage={};vm.security={};formResource.getPrevalueSources().then(function(resp){vm.prevaluesources=resp.data;formResource.getAllFieldTypesWithSettings().then(function(resp){vm.fieldtypes=resp.data;localizationService.localizeMany(providerLocalizationHelper.getLocalizationKeys("formProviderFieldTypes",vm.fieldtypes)).then(function(labels){providerLocalizationHelper.applyLocalizationLabels(vm.fieldtypes,labels);vm.ready=!0})})});userService.getCurrentUser().then(function(response){currentUser=response;securityResource.getByUserId(currentUser.id).then(function(response){vm.security=response.data})})}angular.module("umbraco").controller("UmbracoForms.Editors.Form.FormDesignController",formDesignController)}(),function(){"use strict";function FormSecurityEditController($scope,$routeParams,securityResource,notificationsService,navigationService,localizationService){function init(){navigationService.syncTree({tree:"formsecurity",path:[String($routeParams.id)],forceReload:!0});securityResource.getByUserId($routeParams.id).then(function(resp){vm.security=resp.data;vm.loading=!1})}function save(){localizationService.localizeMany(["formSecurity_saveSuccessTitle","formSecurity_saveErrorTitle"]).then(function(labels){vm.security.userSecurity.user=$routeParams.id;securityResource.save(vm.security).then(function(response){vm.security=response.data;notificationsService.success(labels[0],"");$scope.securityForm.$setPristine()},function(){notificationsService.error(labels[1],"")})})}var vm=this;vm.page={name:"Form Security"};vm.security={};vm.save=save;vm.loading=!0;vm.toggleManageForms=function(){vm.security.userSecurity.manageForms=!vm.security.userSecurity.manageForms};vm.toggleManageWorkflows=function(){vm.security.userSecurity.manageWorkflows=!vm.security.userSecurity.manageWorkflows};vm.toggleManageDataSources=function(){vm.security.userSecurity.manageDataSources=!vm.security.userSecurity.manageDataSources};vm.togglePreValueSources=function(){vm.security.userSecurity.managePreValueSources=!vm.security.userSecurity.managePreValueSources};vm.toggleFormAccess=function(form){form.HasAccess=!form.HasAccess};init()}angular.module("umbraco").controller("UmbracoForms.Editors.Security.EditController",FormSecurityEditController)}();angular.module("umbraco").controller("Umbraco.Forms.GridEditors.FormPickerController",function($scope,$timeout,editorService,macroResource,macroService,$routeParams,$sce){$scope.title="Click to insert form";$scope.macroAlias="renderUmbracoForm";$scope.setFormMacro=function(){var dialogData={richTextEditor:!0,macroData:$scope.control.value||{macroAlias:$scope.macroAlias}},macroPicker={dialogData:dialogData,submit:function(model){var macroObject=macroService.collectValueData(model.selectedMacro,model.macroParams,dialogData.renderingEngine);$scope.control.value={macroAlias:macroObject.macroAlias,macroParamsDictionary:macroObject.macroParamsDictionary};$scope.setPreview($scope.control.value);editorService.close()},close:function(){editorService.close()}};editorService.macroPicker(macroPicker)};$scope.setPreview=function(macro){var contentId=$routeParams.id;macroResource.getMacroResultAsHtmlForEditor(macro.macroAlias,contentId,macro.macroParamsDictionary).then(function(htmlResult){$scope.title=macro.macroAlias;htmlResult.trim().length>0&&htmlResult.indexOf("Macro:")<0&&(htmlResult=htmlResult.replace("<form","<div").replace("<\/form>","<\/div>"),$scope.preview=$sce.trustAsHtml(htmlResult))})};$timeout(function(){$scope.control.$initializing?$scope.setFormMacro():$scope.control.value&&$scope.setPreview($scope.control.value)},200)});angular.module("umbraco").controller("UmbracoForms.Editors.PreValueSource.DeleteController",function($scope,preValueSourceResource,navigationService,treeService){$scope.delete=function(id){preValueSourceResource.deleteByGuid(id).then(function(){treeService.removeNode($scope.currentNode);navigationService.hideNavigation()})};$scope.cancelDelete=function(){navigationService.hideNavigation()}});angular.module("umbraco").controller("UmbracoForms.Editors.PreValueSource.EditController",function($scope,$routeParams,preValueSourceResource,editorState,notificationsService,navigationService,formHelper,userService,securityResource,localizationService,providerLocalizationHelper){var currentUserId=null,setTypeAndSettings,getPrevalues;userService.getCurrentUser().then(function(response){currentUserId=response.id;securityResource.getByUserId(currentUserId).then(function(response){if($scope.security=response.data,!$scope.security.userSecurity.managePreValueSources){localizationService.localizeMany(["formPermissions_accessDeniedTitle","formPrevalueSources_accessDeniedMessage"]).then(function(labels){notificationsService.error(labels[0],labels[1])});navigationService.syncTree({tree:"prevaluesource",path:["-1"],forceReload:!0,activate:!1}).then(function(response){navigationService.reloadNode(response.node)});return}})});$routeParams.create?preValueSourceResource.getScaffold().then(function(response){$scope.loaded=!0;$scope.preValueSource=response.data;preValueSourceResource.getAllPreValueSourceTypesWithSettings().then(function(resp){$scope.types=resp.data;localizationService.localizeMany(providerLocalizationHelper.getLocalizationKeys("formProviderPrevalueSources",$scope.types)).then(function(labels){providerLocalizationHelper.applyLocalizationLabels($scope.types,labels)})});editorState.set($scope.form)}):preValueSourceResource.getByGuid($routeParams.id).then(function(response){$scope.preValueSource=response.data;preValueSourceResource.getAllPreValueSourceTypesWithSettings().then(function(resp){$scope.types=resp.data;localizationService.localizeMany(providerLocalizationHelper.getLocalizationKeys("formProviderPrevalueSources",$scope.types)).then(function(labels){providerLocalizationHelper.applyLocalizationLabels($scope.types,labels);setTypeAndSettings();getPrevalues();$scope.loaded=!0})});navigationService.syncTree({tree:"prevaluesource",path:[String($routeParams.id)],forceReload:!1});editorState.set($scope.preValueSource)});$scope.setType=function(){$scope.prevalues=null;setTypeAndSettings()};$scope.save=function(){formHelper.submitForm({scope:$scope})&&($scope.preValueSource.settings={},$scope.preValueSource.$type&&angular.forEach($scope.preValueSource.$type.settings,function(setting){var key=setting.alias,value=setting.value;$scope.preValueSource.settings[key]=value}),localizationService.localizeMany(["formPrevalueSources_saveSuccessTitle","formPrevalueSources_saveErrorTitle","formMessages_saveErrorMessage"]).then(function(labels){preValueSourceResource.validateSettings($scope.preValueSource).then(function(response){$scope.errors=response.data;$scope.errors.length>0?angular.forEach($scope.errors,function(error){notificationsService.error(labels[1],error.Message)}):preValueSourceResource.save($scope.preValueSource).then(function(response){$scope.preValueSource=response.data;editorState.set($scope.preValueSource);setTypeAndSettings();getPrevalues();$scope.preValueSourceForm.$dirty=!1;navigationService.syncTree({tree:"prevaluesource",path:[String($scope.preValueSource.id)],forceReload:!0});notificationsService.success(labels[0],"")},function(){notificationsService.error(labels[1],"")})},function(){notificationsService.error(labels[1],labels[2])})}))};setTypeAndSettings=function(){$scope.preValueSource.$type=_.where($scope.types,{id:$scope.preValueSource.fieldPreValueSourceTypeId})[0];angular.forEach($scope.preValueSource.settings,function(){for(var key in $scope.preValueSource.settings)$scope.preValueSource.settings.hasOwnProperty(key)&&_.where($scope.preValueSource.$type.settings,{alias:key}).length>0&&(_.where($scope.preValueSource.$type.settings,{alias:key})[0].value=$scope.preValueSource.settings[key])})};getPrevalues=function(){preValueSourceResource.getPreValues($scope.preValueSource).then(function(response){$scope.prevalues=response.data})}}),function(){"use strict";function FormPickerController($scope,$location,formPickerResource,userService,securityResource){function onInit(){$scope.model.config&&$scope.model.config.allowedForms&&(allowedForms=$scope.model.config.allowedForms);userService.getCurrentUser().then(function(response){var currentUserId=response.id;securityResource.getByUserId(currentUserId).then(function(response){formSecurity=response.data.formsSecurity;$scope.model.value&&formPickerResource.getPickedForm($scope.model.value).then(function(response){setSelectedForm(response)},function(){var currentValue=angular.copy($scope.model.value);vm.error="The saved/picked form with id '"+currentValue+"' no longer exists. Pick another form below or clear out the old saved form"})})})}function openFormPicker(){vm.formPickerOverlay||(vm.formPickerOverlay={view:"../App_Plugins/UmbracoForms/backoffice/Form/overlays/formpicker/formpicker.html",allowedForms:allowedForms,show:!0,submit:function(model){model.selectedForms&&model.selectedForms.length>0&&(setSelectedForm(model.selectedForms[0]),$scope.model.value=model.selectedForms[0].id);vm.formPickerOverlay.show=!1;vm.formPickerOverlay=null},close:function(){vm.formPickerOverlay.show=!1;vm.formPickerOverlay=null}})}function setSelectedForm(form){if(vm.selectedForm=form,vm.selectedForm.icon="icon-umb-contour",formSecurity){var formSecurityForForm=formSecurity.filter(function(fs){return fs.Form==vm.selectedForm.id});formSecurityForForm.length>0&&(vm.selectedForm.canEditForm=formSecurityForForm[0].HasAccess,vm.selectedForm.canViewEntries=formSecurityForForm[0].HasAccess)}}function openFormDesigner(){$location.url("forms/Form/edit/"+vm.selectedForm.id)}function openFormEntries(){$location.url("forms/Form/entries/"+vm.selectedForm.id)}function remove(){vm.selectedForm=null;$scope.model.value=null}var vm=this,allowedForms=null,formSecurity=null;vm.loading=!0;vm.selectedForm=null;vm.error=null;vm.openFormPicker=openFormPicker;vm.remove=remove;vm.openFormDesigner=openFormDesigner;vm.openFormEntries=openFormEntries;onInit()}angular.module("umbraco").controller("UmbracoForms.FormPickerController",FormPickerController)}(),function(){"use strict";function FormPickerPrevaluesController($scope,$http,formPickerResource){function onInit(){$scope.model.value||($scope.model.value=[]);vm.forms||(vm.forms=[]);$scope.model.value&&$scope.model.value.length>0&&formPickerResource.getPickedForms($scope.model.value).then(function(response){vm.forms=response})}function openFormPicker(){vm.formPickerOverlay||(vm.formPickerOverlay={view:"../App_Plugins/UmbracoForms/backoffice/Form/overlays/formpicker/formpicker.html",multiPicker:!0,show:!0,submit:function(model){model.selectedForms&&model.selectedForms.length>0&&selectForms(model.selectedForms);vm.formPickerOverlay.show=!1;vm.formPickerOverlay=null},close:function(){vm.formPickerOverlay.show=!1;vm.formPickerOverlay=null}})}function selectForms(selectedForms){angular.forEach(selectedForms,function(selectedForm){$scope.model.value.indexOf(selectedForm.id)===-1&&(vm.forms.push(selectedForm),$scope.model.value.push(selectedForm.id))})}function remove(selectedForm){angular.forEach($scope.model.value,function(formId,index){formId===selectedForm.id&&$scope.model.value.splice(index,1)});angular.forEach(vm.forms,function(form,index){form.id===selectedForm.id&&vm.forms.splice(index,1)})}var vm=this;vm.openFormPicker=openFormPicker;vm.remove=remove;onInit()}angular.module("umbraco").controller("UmbracoForms.FormPickerPrevaluesController",FormPickerPrevaluesController)}(),function(){"use strict";function ThemePickerController($scope){function onInit(){$scope.model.value&&(vm.selectedTheme={},vm.selectedTheme.name=$scope.model.value,vm.selectedTheme.icon="icon-brush")}function openThemePicker(){vm.themePickerOverlay||(vm.themePickerOverlay={view:"../App_Plugins/UmbracoForms/backoffice/Form/overlays/themepicker/themepicker.html",show:!0,submit:function(model){vm.selectedTheme=model.selectedThemes[0];vm.selectedTheme.icon="icon-brush";$scope.model.value=model.selectedThemes[0].name;vm.themePickerOverlay.show=!1;vm.themePickerOverlay=null},close:function(){vm.themePickerOverlay.show=!1;vm.formthemePickerOverlayPickerOverlay=null}})}function remove(){vm.selectedTheme=null;$scope.model.value=null}var vm=this;vm.loading=!0;vm.selectedTheme=null;vm.error=null;vm.openThemePicker=openThemePicker;vm.remove=remove;onInit()}angular.module("umbraco").controller("UmbracoForms.ThemePickerController",ThemePickerController)}();angular.module("umbraco.resources").factory("dataSourceResource",dataSourceResource);angular.module("umbraco.resources").factory("dataSourceWizardResource",dataSourceWizardResource);angular.module("umbraco.resources").factory("exportResource",exportResource);angular.module("umbraco.resources").factory("fieldResource",fieldResource);angular.module("umbraco.resources").factory("formResource",formResource);angular.module("umbraco.resources").factory("formPickerResource",formPickerResource);angular.module("umbraco.resources").factory("licensingResource",licensingResource);angular.module("umbraco.resources").factory("pickerResource",pickerResource);angular.module("umbraco.resources").factory("preValueSourceResource",preValueSourceResource);angular.module("umbraco.resources").factory("recordResource",recordResource);angular.module("umbraco.resources").factory("securityResource",securityResource);angular.module("umbraco.resources").factory("themePickerResource",themePickerResource);angular.module("umbraco.resources").factory("updatesResource",updatesResource);angular.module("umbraco.resources").factory("workflowResource",workflowResource);angular.module("umbraco.directives").directive("umbFormsAutoFocus",function($timeout){return function(scope,element,attr){var update=function(){element.val().indexOf(" field")>=0&&element.focus()};$timeout(function(){update()});scope.$watch(attr.umbFormsFocusOn,function(_focusVal){$timeout(function(){_focusVal&&(element.focus(),element.select(),update())})})}});angular.module("umbraco.directives").directive("umbFormsAutoSize",function($timeout){return function(scope,element){var domEl=element[0],update=function(force){force===!0&&element.height(0);domEl.scrollHeight!==domEl.clientHeight&&element.height(domEl.scrollHeight)};element.bind("keyup keydown keypress change",update);element.bind("blur",function(){update(!0)});$timeout(function(){update()})}});angular.module("umbraco.directives").directive("umbFormsContentPicker",function(entityResource,iconHelper,editorService){return{restrict:"E",replace:!0,templateUrl:"/App_Plugins/UmbracoForms/Directives/umb-forms-content-picker.html",require:"ngModel",link:function(scope,element,attr,ctrl){function populate(item){scope.clear();item.icon=iconHelper.convertFromLegacyIcon(item.icon);scope.node=item;scope.id=item.id;updateModel(item.id)}function updateModel(id){ctrl.$setViewValue(id)}ctrl.$render=function(){var val=parseInt(ctrl.$viewValue);!isNaN(val)&&angular.isNumber(val)&&val>0&&entityResource.getById(val,"Document").then(function(item){item.icon=iconHelper.convertFromLegacyIcon(item.icon);scope.node=item})};scope.openContentPicker=function(){var contentPickerOverlay={submit:function(model){populate(model.selection[0]);editorService.close()},close:function(){editorService.close()}};editorService.contentPicker(contentPickerOverlay)};scope.clear=function(){scope.id=undefined;scope.node=undefined;updateModel(0)}}}});angular.module("umbraco.directives").directive("umbFormsDateRangePicker",function(assetsService){return{restrict:"A",scope:{userLocale:"@",onChange:"="},template:'<div class="umb-forms-date-range-picker daterange daterange--double"><\/div>',link:function(scope,element){assetsService.load(["~/App_Plugins/UmbracoForms/Assets/moment/min/moment-with-locales.min.js","~/App_Plugins/UmbracoForms/Assets/BaremetricsCalendar/public/js/Calendar.js"]).then(function(){new Calendar({element:element.firstChild,earliest_date:"2000-01-01",latest_date:moment(),start_date:moment().subtract(29,"days"),end_date:moment(),same_day_range:!0,callback:function(){var dateFilter={startDate:moment(this.start_date).format("YYYY-MM-DD"),endDate:moment(this.end_date).format("YYYY-MM-DD")};if(scope.onChange)scope.onChange(dateFilter)}})});assetsService.loadCss("/App_Plugins/UmbracoForms/Assets/BaremetricsCalendar/public/css/application.css")}}});angular.module("umbraco.directives").directive("ufDelayedMouseleave",function($timeout,$parse){return{restrict:"A",link:function(scope,element,attrs){var active=!1,fn=$parse(attrs.ufDelayedMouseleave);element.on("mouseleave",function(event){var callback=function(){fn(scope,{$event:event})};active=!1;$timeout(function(){active===!1&&scope.$apply(callback)},650)});element.on("mouseenter",function(){active=!0})}}});angular.module("umbraco.directives").directive("umbFormsDesignerNew",function(formService,fieldResource,workflowResource,notificationsService,editorService,overlayService,localizationService){return{scope:{form:"=",fieldtypes:"=",prevaluesources:"=",security:"="},transclude:!0,restrict:"E",replace:!0,templateUrl:"/App_Plugins/UmbracoForms/Directives/umb-forms-designer-new.html",link:function(scope){var operatorKeys,i,addOrUpdateField;for(scope.sortingMode=!1,scope.sortingButtonKey="general_reorder",scope.state="",scope.ruleOperators=formService.getOperators(),operatorKeys=[],i=0;i<scope.ruleOperators.length;i++)operatorKeys.push("formConditions_operator"+scope.ruleOperators[i].value);localizationService.localizeMany(operatorKeys).then(function(labels){for(var i=0;i<scope.ruleOperators.length;i++)scope.ruleOperators[i].name=labels[i]});scope.setActive=function(fieldSet){angular.forEach(scope.form.pages,function(page){angular.forEach(page.fieldSets,function(fieldset){fieldset.state==="active"&&(fieldset.state="InActive")})});fieldSet.state="active"};scope.sortablePages={distance:10,tolerance:"pointer",opacity:.7,scroll:!0,cursor:"move",placeholder:"umb-forms__page-placeholder",zIndex:6e3,handle:".sortable-handle",items:".sortable",start:function(e,ui){ui.placeholder.height(ui.item.height())}};scope.sortableFieldsets={distance:10,tolerance:"pointer",connectWith:".umb-forms__fieldsets",opacity:.7,scroll:!0,cursor:"move",placeholder:"umb-forms__fieldset-placeholder",zIndex:6e3,handle:".sortable-handle",items:".sortable",start:function(e,ui){ui.placeholder.height(ui.item.height())},over:function(e){scope.$apply(function(){$(e.target).scope().page.dropOnEmpty=!0})},out:function(e){scope.$apply(function(){$(e.target).scope().page.dropOnEmpty=!1})}};scope.sortableFields={distance:10,tolerance:"pointer",connectWith:".umb-forms__fields",opacity:.7,scroll:!0,cursor:"move",placeholder:"umb-forms__field-placeholder",zIndex:6e3,handle:".sortable-handle",items:".sortable",start:function(e,ui){ui.placeholder.height(ui.item.height())},over:function(e){scope.$apply(function(){$(e.target).scope().container.dropOnEmpty=!0})},out:function(e){scope.$apply(function(){$(e.target).scope().container.dropOnEmpty=!1})}};scope.toggleSortingMode=function(){scope.sortingMode=!scope.sortingMode;scope.sortingButtonKey=scope.sortingMode?"general_reorderDone":"general_reorder"};scope.initForm=function(form,fieldtypes){formService.initForm(form,fieldtypes);populateConditionStatusLabels(form)};scope.toggleCopyPrompt=function(object){object.copyPrompt=!object.copyPrompt};scope.hideCopyPrompt=function(object){object.copyPrompt=!1};scope.toggleDeletePrompt=function(object){object.deletePrompt=!object.deletePrompt};scope.hideDeletePrompt=function(object){object.deletePrompt=!1};scope.addPage=function(form){formService.addPage(form)};scope.removePage=function(pages,index){pages.splice(index,1)};scope.formHasFields=function(){var hasFields=!1;return angular.forEach(scope.form.pages,function(page){angular.forEach(page.fieldSets,function(fieldset){angular.forEach(fieldset.containers,function(container){container.fields.length>0&&(hasFields=!0)})})}),hasFields};scope.pageHasFields=function(page){var hasFields=!1;return angular.forEach(page.fieldSets,function(fieldset){angular.forEach(fieldset.containers,function(container){container.fields.length>0&&(hasFields=!0)})}),hasFields};scope.editPage=function(page){populateFields();localizationService.localize("formEdit_editPage").then(function(val){var pageSettingsOverlay={view:"/App_Plugins/UmbracoForms/backoffice/Form/overlays/pagesettings/page-settings.html",title:val,page:page,fields:scope.fields,size:"medium"};editorService.open(pageSettingsOverlay)})};scope.addFieldset=function(page){var _index=page.fieldSets.length;formService.addFieldset(page,_index)};scope.copyFieldset=function(page,fieldset){fieldset.copyPrompt=!1;formService.copyFieldset(page,fieldset,getExistingFieldAliases())};scope.removeFieldset=function(page,fieldset){formService.deleteFieldset(page,fieldset)};scope.editFieldset=function(fieldset){populateFields();localizationService.localize("formEdit_editGroup").then(function(val){var fieldsetSettingsOverlay={view:"/App_Plugins/UmbracoForms/backoffice/Form/overlays/fieldsetsettings/fieldset-settings.html",title:val,fieldset:fieldset,fields:scope.fields,size:"medium"};editorService.open(fieldsetSettingsOverlay)})};addOrUpdateField=function(model,field){var i;for(field.settings={},i=0;i<model.field.$fieldType.settings.length;i++){var setting=model.field.$fieldType.settings[i],key=setting.alias,value=setting.value||"";field.settings[key]=value}fieldResource.validateSettings(field).then(function(response){response.data.length>0?localizationService.localize("formEdit_saveFailedFailedTitle").then(function(errorTitle){angular.forEach(response.data,function(error){notificationsService.error(errorTitle,error.Message)})}):editorService.close()})};scope.addField=function(fieldset,container){populateFields();var emptyField=formService.addEmptyField(container);localizationService.localize("formEdit_addQuestion").then(function(val){var fieldSettingsEditor={view:"/App_Plugins/UmbracoForms/backoffice/Form/overlays/fieldsettings/field-settings.html",title:val,field:emptyField,fields:scope.fields,size:"medium",prevalueSources:scope.prevaluesources,submit:function(model){addOrUpdateField(model,emptyField)},close:function(){formService.deleteField(fieldset,container,emptyField);editorService.close()}};editorService.open(fieldSettingsEditor)})};scope.openFieldSettings=function(field){populateFields();scope.setFieldType(field);localizationService.localize("formEdit_editQuestion").then(function(val){var fieldSettingsOverlay={view:"/App_Plugins/UmbracoForms/backoffice/Form/overlays/fieldsettings/field-settings.html",title:val,field:field,fields:scope.fields,size:"medium",prevalueSources:scope.prevaluesources,submit:function(model){addOrUpdateField(model,field)},close:function(){editorService.close()}};editorService.open(fieldSettingsOverlay)})};scope.removeField=function(fieldset,container,field){formService.deleteField(fieldset,container,field)};scope.copyField=function(container,field){field.copyPrompt=!1;formService.copyField(container,field,getExistingFieldAliases())};scope.setFieldType=function(field){angular.forEach(field.settings,function(){for(var key in field.settings)field.settings.hasOwnProperty(key)&&_.where(field.$fieldType.settings,{alias:key}).length>0&&(_.where(field.$fieldType.settings,{alias:key})[0].value=field.settings[key])})};scope.getFieldNameFromGuid=function(selectedFieldId){var i,field;for(populateFields(),i=0;i<scope.fields.length;i++)if(field=scope.fields[i],field.id===selectedFieldId)return field.caption};scope.getRuleOperatorName=function(operator){for(var i=0;i<scope.ruleOperators.length;i++)if(scope.ruleOperators[i].value===operator)return scope.ruleOperators[i].name;return operator};scope.editWorkflows=function(){if(scope.security&&scope.security.userSecurity.manageWorkflows){populateFields();var oldFormWorkflows=angular.copy(scope.form.formWorkflows),oldMessageOnSubmit=angular.copy(scope.form.messageOnSubmit),oldGoToPageOnSubmit=angular.copy(scope.form.goToPageOnSubmit);localizationService.localize("formEdit_editQuestion").then(function(val){var workflowOverlay={view:"/App_Plugins/UmbracoForms/backoffice/Form/overlays/workflows/workflows-overview.html",title:val,formWorkflows:scope.form.formWorkflows,messageOnSubmit:scope.form.messageOnSubmit,goToPageOnSubmit:scope.form.goToPageOnSubmit,submitLabel:scope.form.submitLabel,manualApproval:scope.form.manualApproval,fields:scope.fields,size:"medium",submit:function(model){scope.form.formWorkflows=model.formWorkflows;scope.form.messageOnSubmit=model.messageOnSubmit;scope.form.goToPageOnSubmit=model.goToPageOnSubmit;editorService.close()},close:function(){scope.form.formWorkflows=oldFormWorkflows;scope.form.messageOnSubmit=oldMessageOnSubmit;scope.form.goToPageOnSubmit=oldGoToPageOnSubmit;editorService.close()}};editorService.open(workflowOverlay)})}};scope.editWorkflowSettings=function(workflow,collection,index){if(scope.security&&scope.security.userSecurity.manageWorkflows){populateFields();var preEditedWorkflow=JSON.parse(JSON.stringify(workflow)),workflowSettingsOverlay={view:"/App_Plugins/UmbracoForms/backoffice/Form/overlays/workflows/workflow-settings.html",workflow:workflow,fields:scope.fields,title:workflow.name,size:"medium",submit:function(model){workflowResource.validateWorkflowSettings(model.workflow).then(function(response){response.data.length>0?localizationService.localize("formWorkflows_saveFailedTitle").then(function(errorTitle){angular.forEach(response.data,function(error){notificationsService.error(errorTitle,error.Message)})}):editorService.close()})},close:function(hasChanges){hasChanges?localizationService.localizeMany(["formWorkflows_closeConfirmationTitle","formWorkflows_closeConfirmationMessage","general_no","general_yes"]).then(function(labels){var overlay={view:"confirm",title:labels[0],content:labels[1],closeButtonLabel:labels[2],submitButtonLabel:labels[3],submitButtonStyle:"danger",close:function(){overlayService.close()},submit:function(){scope.form.formWorkflows[collection][index]=preEditedWorkflow;overlayService.close();editorService.close()}};overlayService.open(overlay)}):editorService.close()}};editorService.open(workflowSettingsOverlay)}};scope.editSubmitMessageWorkflow=function(){localizationService.localize("formWorkflows_messageOnSubmit").then(function(val){var submitMessageWorkflowOverlay={view:"/App_Plugins/UmbracoForms/backoffice/Form/overlays/workflows/submit-message-workflow-settings.html",title:val,messageOnSubmit:scope.form.messageOnSubmit,goToPageOnSubmit:scope.form.goToPageOnSubmit,size:"medium",submit:function(model){scope.form.messageOnSubmit=model.messageOnSubmit;scope.form.goToPageOnSubmit=model.goToPageOnSubmit;editorService.close()},close:function(){editorService.close()}};editorService.open(submitMessageWorkflowOverlay)})};var populateFields=function(){scope.fields=[];angular.forEach(scope.form.pages,function(page){angular.forEach(page.fieldSets,function(fieldset){angular.forEach(fieldset.containers,function(container){angular.forEach(container.fields,function(field){scope.fields.push(field)})})})})},getExistingFieldAliases=function(){var aliases=[];return angular.forEach(scope.form.pages,function(page){angular.forEach(page.fieldSets,function(fieldset){angular.forEach(fieldset.containers,function(container){angular.forEach(container.fields,function(field){aliases.push(field.alias)})})})}),aliases},applyStatusLabel=function(condition,format){condition&&(condition.statusLabel=format.replace("%0%",condition.actionType).replace("%1%",condition.logicType.toLowerCase()))},populateConditionStatusLabels=function(form){localizationService.localizeMany(["formConditions_pageButtonConditionStatus","formConditions_fieldsetConditionStatus","formConditions_fieldConditionStatus"]).then(function(labels){angular.forEach(form.pages,function(page){applyStatusLabel(page.buttonCondition,labels[0]);angular.forEach(page.fieldSets,function(fieldset){applyStatusLabel(fieldset.condition,labels[1]);angular.forEach(fieldset.containers,function(container){angular.forEach(container.fields,function(field){applyStatusLabel(field.condition,labels[2])})})})})})};scope.initForm(scope.form,scope.fieldtypes)}}}),function(){"use strict";function FormsEntryDetail(userService,currentUserResource,editorService){function link(scope){scope.canLinkToContent=!1;scope.canLinkToMembers=!1;userService.getCurrentUser().then(function(user){var canAccessContentSection=user.allowedSections.indexOf("content")!==-1;canAccessContentSection&&currentUserResource.checkPermission("F",scope.entry.umbracoPage.id).then(function(data){scope.canLinkToContent=data});scope.canLinkToMembers=user.allowedSections.indexOf("member")!==-1});scope.openContent=function(id){editorService.contentEditor({id:id,close:function(){editorService.close()}})};var getMember=function(entry){for(var i=0;i<entry.fields.length;i++)if(entry.fields[i]&&entry.fields[i].ContentTypeAlias==="Member")return entry.fields[i];return null};scope.hasMember=function(entry){return getMember(entry)!==null};scope.getMemberDetails=function(entry){var member=getMember(entry);return member?member.Name+" ("+member.Email+")":""};scope.openMember=function(entry){var member=getMember(entry);member&&editorService.memberEditor({id:member.Key,close:function(){editorService.close()}})}}return{restrict:"E",replace:!0,templateUrl:"/App_Plugins/UmbracoForms/Directives/umb-forms-entry-detail.html",scope:{entry:"=",sensitiveDataAccess:"="},link:link}}angular.module("umbraco.directives").directive("umbFormsEntryDetail",FormsEntryDetail)}();angular.module("umbraco.directives").directive("umbFormsFileUploadEditor",function(notificationsService,overlayService,localizationService){return{restrict:"E",replace:!0,templateUrl:"/App_Plugins/UmbracoForms/Directives/umb-forms-file-upload-editor.html",require:"ngModel",link:function(scope,element,attr,ctrl){function updateModel(){ctrl.$setViewValue(scope.allowedFileTypes)}localizationService.localizeMany(["formFileUpload_allowAllFiles","formFileUpload_allowOnlySpecifiedFiles"]).then(function(labels){scope.allowedFileTypes=[{Type:"",Name:labels[0],Checked:!1},{Type:"pdf",Name:"PDF",Checked:!1},{Type:"docx",Name:"DOCX",Checked:!1},{Type:"xlsx",Name:"XLSX",Checked:!1},{Type:"txt",Name:"TXT",Checked:!1},{Type:"png",Name:"PNG",Checked:!1},{Type:"jpg",Name:"JPG",Checked:!1},{Type:"gif",Name:"GIF",Checked:!1}];scope.allowedFileTypesToggleTextOn=labels[0];scope.allowedFileTypesToggleTextOff=labels[1]});ctrl.$render=function(){Object.prototype.toString.call(ctrl.$viewValue)==="[object Array]"&&(ctrl.$viewValue.forEach(function(allowedFileType){allowedFileType.Checked===undefined||allowedFileType.Checked===null?allowedFileType.Checked=undefined:typeof allowedFileType.Checked=="string"&&allowedFileType.Checked.toLowerCase()==="false"?allowedFileType.Checked=!1:typeof allowedFileType.Checked=="string"&&allowedFileType.Checked.toLowerCase()==="true"&&(allowedFileType.Checked=!0)}),scope.allowedFileTypes=ctrl.$viewValue);updateModel()};scope.deleteAllowedFileType=function(idx){var performDelete=function(){scope.allowedFileTypes.splice(idx,1);updateModel()};localizationService.localizeMany(["formFileUpload_deleteAllowedFileTypeConfirmationTitle","formFileUpload_deleteAllowedFileTypeConfirmationDescription","general_no","general_yes"]).then(function(labels){var overlay={view:"confirm",title:labels[0],content:labels[1],closeButtonLabel:labels[2],submitButtonLabel:labels[3],submitButtonStyle:"danger",close:function(){overlayService.close()},submit:function(){performDelete();overlayService.close()}};overlayService.open(overlay)})};scope.addAllowedFileType=function(){if(scope.newAllowedFileType&&(scope.newAllowedFileType=scope.newAllowedFileType.replace(/[^a-zA-Z0-9]/g,""),scope.newAllowedFileType.length!==0)){var indexOfExisting=scope.allowedFileTypes.findIndex(function(p){return p.Name.toUpperCase()===scope.newAllowedFileType.toUpperCase()});indexOfExisting<0?(scope.allowedFileTypes.push({Type:scope.newAllowedFileType,Name:scope.newAllowedFileType.toUpperCase(),Checked:undefined}),scope.newAllowedFileType="",scope.allowedFileTypes.forEach(function(allowedFileType){allowedFileType.Type===""&&(allowedFileType.Checked=!1)}),updateModel()):localizationService.localizeMany(["formFileUpload_duplicateFileTypeErrorTitle","formFileUpload_duplicateFileTypeErrorMessage"]).then(function(labels){notificationsService.error(labels[0],labels[1])})}};scope.switchAllowedPredefined=function(allowedFileType,updateProvidedFileType){updateProvidedFileType&&(allowedFileType.Checked=!allowedFileType.Checked);allowedFileType!==undefined&&(allowedFileType.Type===""&&allowedFileType.Checked===!0&&scope.allowedFileTypes.forEach(function(allowedFileType){allowedFileType.Type!==""&&allowedFileType.Checked!==undefined&&(allowedFileType.Checked=!1)}),allowedFileType.Type!==""&&allowedFileType.Checked===!0&&allowedFileType.Checked!==undefined&&scope.allowedFileTypes.forEach(function(allowedFileType){allowedFileType.Type===""&&(allowedFileType.Checked=!1)}),updateModel())}}}});angular.module("umbraco.directives").directive("umbFormsInlinePrevalueEditor",function(notificationsService,localizationService){return{restrict:"E",replace:!0,templateUrl:"/App_Plugins/UmbracoForms/Directives/umb-forms-inline-prevalue-editor.html",require:"ngModel",link:function(scope,element,attr,ctrl){function updateModel(){ctrl.$setViewValue(scope.prevalues)}function addPrevalue(){scope.prevalues.indexOf(scope.newPrevalue)<0?(scope.prevalues.push(scope.newPrevalue),scope.newPrevalue="",updateModel()):localizationService.localizeMany(["formPrevalues_duplicateErrorTitle","formPrevalues_duplicateAddErrorMessage"]).then(function(labels){notificationsService.error(labels[0],labels[1])})}scope.prevalues=[];ctrl.$render=function(){Object.prototype.toString.call(ctrl.$viewValue)==="[object Array]"&&(scope.prevalues=ctrl.$viewValue)};scope.addPrevalue=function(){addPrevalue()}}}});angular.module("umbraco.directives").directive("umbFormsPrevalueEditor",function(notificationsService,localizationService){return{restrict:"E",replace:!0,templateUrl:"/App_Plugins/UmbracoForms/Directives/umb-forms-prevalue-editor.html",require:"ngModel",link:function(scope,element,attr,ctrl){function updateModel(){ctrl.$setViewValue(scope.prevalues)}scope.prevalues=[];scope.editIndex=-1;scope.deleteIndex=-1;scope.addLabel="";scope.saveLabel="";localizationService.localizeMany(["general_add","buttons_save"]).then(function(labels){scope.addLabel=labels[0];scope.saveLabel=labels[1]});ctrl.$render=function(){Object.prototype.toString.call(ctrl.$viewValue)==="[object Array]"&&(scope.prevalues=ctrl.$viewValue)};scope.editPrevalue=function(idx){scope.editIndex=idx;scope.newPrevalue=scope.prevalues[idx]};scope.deletePrevalue=function(idx){scope.prevalues.splice(idx,1);updateModel()};scope.addPrevalue=function(){var otherPrevalues=scope.prevalues.slice();scope.isEditing()&&otherPrevalues.splice(scope.editIndex,1);otherPrevalues.indexOf(scope.newPrevalue)<0?(scope.isEditing()?scope.prevalues[scope.editIndex]=scope.newPrevalue:scope.prevalues.push(scope.newPrevalue),scope.newPrevalue="",scope.editIndex=-1,updateModel()):localizationService.localizeMany(["formPrevalues_duplicateErrorTitle","formPrevalues_duplicateEditErrorMessage","formPrevalues_duplicateAddErrorMessage"]).then(function(labels){notificationsService.error(labels[0],scope.isEditing()?labels[1]:labels[2])})};scope.cancelEditing=function(){scope.newPrevalue="";scope.editIndex=-1};scope.isEditing=function(){return scope.editIndex>=0};scope.showDeletePrompt=function(idx){scope.deleteIndex=idx};scope.isDeleting=function(idx){return scope.deleteIndex===idx};scope.hideDeletePrompt=function(){scope.deleteIndex=-1}}}}),function(){"use strict";function FormsRenderType(){return{restrict:"E",replace:!0,templateUrl:"/App_Plugins/UmbracoForms/Directives/umb-forms-render-type.html",scope:{view:"=",field:"=",sensitive:"=",hasAccess:"=",name:"="}}}angular.module("umbraco.directives").directive("umbFormsRenderType",FormsRenderType)}();angular.module("umbraco.services").factory("formService",formService),function(){"use strict";function validationService(){function getErrorMessageFromExceptionResponse(err){var errorMessage=err.data.Message,modelStateValues;return err.data.ModelState&&(modelStateValues=Object.keys(err.data.ModelState).map(function(key){return err.data.ModelState[key][0]}),errorMessage=modelStateValues.join("<br/>")),errorMessage}return{getErrorMessageFromExceptionResponse:getErrorMessageFromExceptionResponse}}angular.module("umbraco.services").factory("formsValidationService",validationService)}(),function(){"use strict";function providerLocalizationHelper(){var convertNameForKey=function(name){return name.replace(/(?:^\w|[A-Z]|\b\w)/g,function(word,index){return index===0?word.toLowerCase():word.toUpperCase()}).replace(/\W+/g,"")},getLocalizationKeys=function(stem,types,name){for(var systemName,keyStem,j,keySettingStem,keys=[],i=0;i<types.length;i++)if(systemName=name||types[i].name,keyStem=stem+"_"+convertNameForKey(systemName),keys.push(keyStem+"Name"),keys.push(keyStem+"Description"),types[i].settings)for(j=0;j<types[i].settings.length;j++)keySettingStem=keyStem+types[i].settings[j].alias,keys.push(keySettingStem+"Label"),keys.push(keySettingStem+"Description");return keys},getLocalizationKeysForFormWorkflows=function(formWorkflows){var keys=[],allWorkflows=formWorkflows.onSubmit,stem,i,keyStem;for(allWorkflows.push.apply(allWorkflows,formWorkflows.onApprove),stem="formProviderWorkflows",i=0;i<allWorkflows.length;i++)keyStem=stem+"_"+convertNameForKey(allWorkflows[i].workflowTypeName),keys.push(keyStem+"Name"),keys.push(keyStem+"Description");return keys},labelIsTranslated=function(label){return!(label[0]==="["&&label[label.length-1]==="]")},applyLocalizationLabels=function(types,labels,omitSettingName){for(var j,labelIndex=0,i=0;i<types.length;i++)if(!omitSettingName&&labelIsTranslated(labels[labelIndex])&&(types[i].name=labels[labelIndex]),labelIndex++,labelIsTranslated(labels[labelIndex])&&(types[i].description=labels[labelIndex]),labelIndex++,types[i].settings)for(j=0;j<types[i].settings.length;j++)labelIsTranslated(labels[labelIndex])&&(types[i].settings[j].name=labels[labelIndex],types[i].settings[j].description=labels[labelIndex+1]),labelIndex=labelIndex+2},applyLocalizationLabelsToFormWorkflows=function(formWorkflows,labels){var allWorkflows=formWorkflows.onSubmit,labelIndex,i;for(allWorkflows.push.apply(allWorkflows,formWorkflows.onApprove),labelIndex=0,i=0;i<allWorkflows.length;i++)labelIsTranslated(labels[labelIndex])&&(allWorkflows[i].workflowTypeName=labels[labelIndex]),labelIndex++,labelIsTranslated(labels[labelIndex])&&(allWorkflows[i].workflowTypeDescription=labels[labelIndex]),labelIndex++};return{getLocalizationKeys:getLocalizationKeys,getLocalizationKeysForFormWorkflows:getLocalizationKeysForFormWorkflows,applyLocalizationLabels:applyLocalizationLabels,applyLocalizationLabelsToFormWorkflows:applyLocalizationLabelsToFormWorkflows}}angular.module("umbraco.services").factory("providerLocalizationHelper",providerLocalizationHelper)}(),function(){"use strict";function utilityService(){function compareVersions(v1,v2,options){function isValidPart(x){return(lexicographical?/^\d+[A-Za-z]*$/:/^\d+$/).test(x)}var lexicographical=options&&options.lexicographical,zeroExtend=options&&options.zeroExtend,v1parts=v1.split("."),v2parts=v2.split("."),i;if(!v1parts.every(isValidPart)||!v2parts.every(isValidPart))return NaN;if(zeroExtend){while(v1parts.length<v2parts.length)v1parts.push("0");while(v2parts.length<v1parts.length)v2parts.push("0")}for(lexicographical||(v1parts=v1parts.map(Number),v2parts=v2parts.map(Number)),i=0;i<v1parts.length;++i){if(v2parts.length===i)return 1;if(v1parts[i]===v2parts[i])continue;else return v1parts[i]>v2parts[i]?1:-1}return v1parts.length!==v2parts.length?-1:0}function serverTimeNeedsOffsetting(){var needsOffsetting=!1,serverOffset=0,localOffset;return Umbraco.Sys.ServerVariables.application.serverTimeOffset!==undefined&&(serverOffset=Umbraco.Sys.ServerVariables.application.serverTimeOffset,localOffset=(new Date).getTimezoneOffset(),needsOffsetting=-serverOffset!==localOffset),needsOffsetting}return{compareVersions:compareVersions,serverTimeNeedsOffsetting:serverTimeNeedsOffsetting}}angular.module("umbraco.services").factory("utilityService",utilityService)}();angular.module("umbraco.filters").config(function($injector,$provide){$injector.has("truncateFilter")||$provide.provider("truncateFilter",function(){return{$get:function(){return function(value,wordwise,max,tail){if(!value)return"";if((typeof wordwise!="boolean"&&(max!==!0&&(tail=""),max=wordwise,wordwise=!1),max=parseInt(max,10),!max)||value.length<=max)return value;if(tail=!tail&&tail!==""?"…":tail,wordwise&&value.substr(max,1)===" "&&max++,value=value.substr(0,max),wordwise){var lastspace=value.lastIndexOf(" ");lastspace!==-1&&(value=value.substr(0,lastspace+1))}return value+tail}}}})});angular.module("umbraco.filters").filter("fileName",function(){return function(input){return input.split("\\").pop().split("/").pop()}});angular.module("umbraco.filters").filter("momentDateTimeZone",function(){return function(input,momentFormat){var parseDate=moment.utc(input);return parseDate.format(momentFormat)}});angular.module("umbraco.filters").filter("relativeDate",function($filter){return function(input){var now=moment(),parseDate=moment(input.replace("Z",""));return parseDate.isValid()===!1?$filter("date")(input,"medium"):parseDate.from(now)}})